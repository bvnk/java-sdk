/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import java.math.BigDecimal;
import io.swagger.client.model.ClientValidationErrorDto;
import io.swagger.client.model.PayOutDetailDto;
import io.swagger.client.model.PayRequestDto;
import io.swagger.client.model.PaymentStatusDto;
import io.swagger.client.model.ServerErrorDto;
import io.swagger.client.model.SummaryPaymentDto;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for PaymentsApi
 */
@Ignore
public class PaymentsApiTest {

    private final PaymentsApi api = new PaymentsApi();

    /**
     * List Payments
     *
     * Retrieves a list of payments on a specific Merchant ID
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void apiV1PaySummaryGetTest() throws Exception {
        String merchantId = null;
        String customerReference = null;
        String paymentExternalId = null;
        String fromDate = null;
        String toDate = null;
        BigDecimal offset = null;
        BigDecimal max = null;
        PaymentStatusDto status = null;
        String order = null;
        List<SummaryPaymentDto> response = api.apiV1PaySummaryGet(merchantId, customerReference, paymentExternalId, fromDate, toDate, offset, max, status, order);

        // TODO: test validations
    }
    /**
     * Create payment
     *
     * Creates a payment, either type IN or type OUT.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void apiV1PaySummaryPostTest() throws Exception {
        PayRequestDto body = null;
        SummaryPaymentDto response = api.apiV1PaySummaryPost(body);

        // TODO: test validations
    }
    /**
     * Get Payment
     *
     * Retrieves details of a specific payment using the UUID of the payment.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void apiV1PayUuidSummaryGetTest() throws Exception {
        String uuid = null;
        SummaryPaymentDto response = api.apiV1PayUuidSummaryGet(uuid);

        // TODO: test validations
    }
    /**
     * Validate Address
     *
     * Validates that a crypto address is correct.  Use this endpoint to validate that an address exists, is correctly formatted, and includes all the required data. This endpoint can help prevent your end users losing funds when submitting a payout.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void apiV1PayValidatePutTest() throws Exception {
        PayOutDetailDto body = null;
        api.apiV1PayValidatePut(body);

        // TODO: test validations
    }
}
