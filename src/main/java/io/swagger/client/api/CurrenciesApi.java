/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.Merchant;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CurrenciesApi {
    private ApiClient apiClient;

    public CurrenciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CurrenciesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for listCurrenciesCrypto
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param allowDeposits list currencies that only allow deposits (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCurrenciesCryptoCall(BigDecimal offset, BigDecimal max, Boolean allowDeposits, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/currency/crypto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max", max));
        if (allowDeposits != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allowDeposits", allowDeposits));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCurrenciesCryptoValidateBeforeCall(BigDecimal offset, BigDecimal max, Boolean allowDeposits, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listCurrenciesCryptoCall(offset, max, allowDeposits, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Crypto Currencies
     * Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param allowDeposits list currencies that only allow deposits (optional, default to false)
     * @return List&lt;Merchant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Merchant> listCurrenciesCrypto(BigDecimal offset, BigDecimal max, Boolean allowDeposits) throws ApiException {
        ApiResponse<List<Merchant>> resp = listCurrenciesCryptoWithHttpInfo(offset, max, allowDeposits);
        return resp.getData();
    }

    /**
     * List Crypto Currencies
     * Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param allowDeposits list currencies that only allow deposits (optional, default to false)
     * @return ApiResponse&lt;List&lt;Merchant&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Merchant>> listCurrenciesCryptoWithHttpInfo(BigDecimal offset, BigDecimal max, Boolean allowDeposits) throws ApiException {
        com.squareup.okhttp.Call call = listCurrenciesCryptoValidateBeforeCall(offset, max, allowDeposits, null, null);
        Type localVarReturnType = new TypeToken<List<Merchant>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Crypto Currencies (asynchronously)
     * Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param allowDeposits list currencies that only allow deposits (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCurrenciesCryptoAsync(BigDecimal offset, BigDecimal max, Boolean allowDeposits, final ApiCallback<List<Merchant>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCurrenciesCryptoValidateBeforeCall(offset, max, allowDeposits, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Merchant>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCurrenciesDeposit
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCurrenciesDepositCall(BigDecimal offset, BigDecimal max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/currency/deposit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max", max));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCurrenciesDepositValidateBeforeCall(BigDecimal offset, BigDecimal max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listCurrenciesDepositCall(offset, max, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Wallet Currencies
     * These are the currencies that can be used to create a new wallet.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @return List&lt;Merchant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Merchant> listCurrenciesDeposit(BigDecimal offset, BigDecimal max) throws ApiException {
        ApiResponse<List<Merchant>> resp = listCurrenciesDepositWithHttpInfo(offset, max);
        return resp.getData();
    }

    /**
     * List Wallet Currencies
     * These are the currencies that can be used to create a new wallet.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @return ApiResponse&lt;List&lt;Merchant&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Merchant>> listCurrenciesDepositWithHttpInfo(BigDecimal offset, BigDecimal max) throws ApiException {
        com.squareup.okhttp.Call call = listCurrenciesDepositValidateBeforeCall(offset, max, null, null);
        Type localVarReturnType = new TypeToken<List<Merchant>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Wallet Currencies (asynchronously)
     * These are the currencies that can be used to create a new wallet.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCurrenciesDepositAsync(BigDecimal offset, BigDecimal max, final ApiCallback<List<Merchant>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCurrenciesDepositValidateBeforeCall(offset, max, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Merchant>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCurrenciesFiat
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param usable list currencies that are usable (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCurrenciesFiatCall(BigDecimal offset, BigDecimal max, Boolean usable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/currency/fiat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max", max));
        if (usable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("usable", usable));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCurrenciesFiatValidateBeforeCall(BigDecimal offset, BigDecimal max, Boolean usable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listCurrenciesFiatCall(offset, max, usable, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Fiat Currencies
     * Retrieves a list of all display fiat currencies available on BVNK&#x27;s Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param usable list currencies that are usable (optional, default to false)
     * @return List&lt;Merchant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Merchant> listCurrenciesFiat(BigDecimal offset, BigDecimal max, Boolean usable) throws ApiException {
        ApiResponse<List<Merchant>> resp = listCurrenciesFiatWithHttpInfo(offset, max, usable);
        return resp.getData();
    }

    /**
     * List Fiat Currencies
     * Retrieves a list of all display fiat currencies available on BVNK&#x27;s Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param usable list currencies that are usable (optional, default to false)
     * @return ApiResponse&lt;List&lt;Merchant&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Merchant>> listCurrenciesFiatWithHttpInfo(BigDecimal offset, BigDecimal max, Boolean usable) throws ApiException {
        com.squareup.okhttp.Call call = listCurrenciesFiatValidateBeforeCall(offset, max, usable, null, null);
        Type localVarReturnType = new TypeToken<List<Merchant>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Fiat Currencies (asynchronously)
     * Retrieves a list of all display fiat currencies available on BVNK&#x27;s Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param usable list currencies that are usable (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCurrenciesFiatAsync(BigDecimal offset, BigDecimal max, Boolean usable, final ApiCallback<List<Merchant>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCurrenciesFiatValidateBeforeCall(offset, max, usable, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Merchant>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
