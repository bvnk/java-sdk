/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ClientValidationErrorDto;
import io.swagger.client.model.MerchantChannel;
import io.swagger.client.model.MerchantChannelPayment;
import io.swagger.client.model.MerchantChannelRequest;
import io.swagger.client.model.PaymentStatusDto;
import io.swagger.client.model.ServerErrorDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChannelsApi {
    private ApiClient apiClient;

    public ChannelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV2ChannelGet
     * @param merchantId The merchant ID that the channels belong to (required)
     * @param offset Offset (optional)
     * @param max Maximum number of items in response (optional)
     * @param sort The attribute used to sort the data (optional)
     * @param order Ordering direction (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV2ChannelGetCall(String merchantId, String offset, String max, PaymentStatusDto sort, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v2/channel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (merchantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("merchantId", merchantId));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max", max));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Hawk" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV2ChannelGetValidateBeforeCall(String merchantId, String offset, String max, PaymentStatusDto sort, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling apiV2ChannelGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV2ChannelGetCall(merchantId, offset, max, sort, order, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Channels
     * Retrieves all channels related to a Merchant ID.
     * @param merchantId The merchant ID that the channels belong to (required)
     * @param offset Offset (optional)
     * @param max Maximum number of items in response (optional)
     * @param sort The attribute used to sort the data (optional)
     * @param order Ordering direction (optional)
     * @return List&lt;MerchantChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MerchantChannel> apiV2ChannelGet(String merchantId, String offset, String max, PaymentStatusDto sort, String order) throws ApiException {
        ApiResponse<List<MerchantChannel>> resp = apiV2ChannelGetWithHttpInfo(merchantId, offset, max, sort, order);
        return resp.getData();
    }

    /**
     * List Channels
     * Retrieves all channels related to a Merchant ID.
     * @param merchantId The merchant ID that the channels belong to (required)
     * @param offset Offset (optional)
     * @param max Maximum number of items in response (optional)
     * @param sort The attribute used to sort the data (optional)
     * @param order Ordering direction (optional)
     * @return ApiResponse&lt;List&lt;MerchantChannel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MerchantChannel>> apiV2ChannelGetWithHttpInfo(String merchantId, String offset, String max, PaymentStatusDto sort, String order) throws ApiException {
        com.squareup.okhttp.Call call = apiV2ChannelGetValidateBeforeCall(merchantId, offset, max, sort, order, null, null);
        Type localVarReturnType = new TypeToken<List<MerchantChannel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Channels (asynchronously)
     * Retrieves all channels related to a Merchant ID.
     * @param merchantId The merchant ID that the channels belong to (required)
     * @param offset Offset (optional)
     * @param max Maximum number of items in response (optional)
     * @param sort The attribute used to sort the data (optional)
     * @param order Ordering direction (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV2ChannelGetAsync(String merchantId, String offset, String max, PaymentStatusDto sort, String order, final ApiCallback<List<MerchantChannel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV2ChannelGetValidateBeforeCall(merchantId, offset, max, sort, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MerchantChannel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV2ChannelPaymentGet
     * @param merchantId The Merchant ID (required)
     * @param status  (optional)
     * @param fromDate From which date to start searching. (optional)
     * @param toDate At which date to stop searching. (optional)
     * @param offset Where to start fetching records. (optional)
     * @param max Maximum number of items in response (optional)
     * @param order Ordering direction (optional)
     * @param q Can be UUID of the payment, reference, channel UUID, transaction hash, or wallet code. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV2ChannelPaymentGetCall(String merchantId, String status, String fromDate, String toDate, String offset, String max, String order, String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v2/channel/payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (merchantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("merchantId", merchantId));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromDate", fromDate));
        if (toDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("toDate", toDate));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max", max));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Hawk" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV2ChannelPaymentGetValidateBeforeCall(String merchantId, String status, String fromDate, String toDate, String offset, String max, String order, String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling apiV2ChannelPaymentGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV2ChannelPaymentGetCall(merchantId, status, fromDate, toDate, offset, max, order, q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Channel Payments
     * Retrieves a list of payments to a channel on a specific Merchant ID.
     * @param merchantId The Merchant ID (required)
     * @param status  (optional)
     * @param fromDate From which date to start searching. (optional)
     * @param toDate At which date to stop searching. (optional)
     * @param offset Where to start fetching records. (optional)
     * @param max Maximum number of items in response (optional)
     * @param order Ordering direction (optional)
     * @param q Can be UUID of the payment, reference, channel UUID, transaction hash, or wallet code. (optional)
     * @return List&lt;MerchantChannelPayment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MerchantChannelPayment> apiV2ChannelPaymentGet(String merchantId, String status, String fromDate, String toDate, String offset, String max, String order, String q) throws ApiException {
        ApiResponse<List<MerchantChannelPayment>> resp = apiV2ChannelPaymentGetWithHttpInfo(merchantId, status, fromDate, toDate, offset, max, order, q);
        return resp.getData();
    }

    /**
     * List Channel Payments
     * Retrieves a list of payments to a channel on a specific Merchant ID.
     * @param merchantId The Merchant ID (required)
     * @param status  (optional)
     * @param fromDate From which date to start searching. (optional)
     * @param toDate At which date to stop searching. (optional)
     * @param offset Where to start fetching records. (optional)
     * @param max Maximum number of items in response (optional)
     * @param order Ordering direction (optional)
     * @param q Can be UUID of the payment, reference, channel UUID, transaction hash, or wallet code. (optional)
     * @return ApiResponse&lt;List&lt;MerchantChannelPayment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MerchantChannelPayment>> apiV2ChannelPaymentGetWithHttpInfo(String merchantId, String status, String fromDate, String toDate, String offset, String max, String order, String q) throws ApiException {
        com.squareup.okhttp.Call call = apiV2ChannelPaymentGetValidateBeforeCall(merchantId, status, fromDate, toDate, offset, max, order, q, null, null);
        Type localVarReturnType = new TypeToken<List<MerchantChannelPayment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Channel Payments (asynchronously)
     * Retrieves a list of payments to a channel on a specific Merchant ID.
     * @param merchantId The Merchant ID (required)
     * @param status  (optional)
     * @param fromDate From which date to start searching. (optional)
     * @param toDate At which date to stop searching. (optional)
     * @param offset Where to start fetching records. (optional)
     * @param max Maximum number of items in response (optional)
     * @param order Ordering direction (optional)
     * @param q Can be UUID of the payment, reference, channel UUID, transaction hash, or wallet code. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV2ChannelPaymentGetAsync(String merchantId, String status, String fromDate, String toDate, String offset, String max, String order, String q, final ApiCallback<List<MerchantChannelPayment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV2ChannelPaymentGetValidateBeforeCall(merchantId, status, fromDate, toDate, offset, max, order, q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MerchantChannelPayment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV2ChannelPaymentUuidGet
     * @param uuid The UUID of the payment you are querying. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV2ChannelPaymentUuidGetCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v2/channel/payment/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Hawk" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV2ChannelPaymentUuidGetValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2ChannelPaymentUuidGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV2ChannelPaymentUuidGetCall(uuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Channel Payment
     * Retrieves a specific payment made into a channel.
     * @param uuid The UUID of the payment you are querying. (required)
     * @return MerchantChannelPayment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MerchantChannelPayment apiV2ChannelPaymentUuidGet(String uuid) throws ApiException {
        ApiResponse<MerchantChannelPayment> resp = apiV2ChannelPaymentUuidGetWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Get Channel Payment
     * Retrieves a specific payment made into a channel.
     * @param uuid The UUID of the payment you are querying. (required)
     * @return ApiResponse&lt;MerchantChannelPayment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MerchantChannelPayment> apiV2ChannelPaymentUuidGetWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = apiV2ChannelPaymentUuidGetValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<MerchantChannelPayment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Channel Payment (asynchronously)
     * Retrieves a specific payment made into a channel.
     * @param uuid The UUID of the payment you are querying. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV2ChannelPaymentUuidGetAsync(String uuid, final ApiCallback<MerchantChannelPayment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV2ChannelPaymentUuidGetValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MerchantChannelPayment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV2ChannelPost
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV2ChannelPostCall(MerchantChannelRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v2/channel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Hawk" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV2ChannelPostValidateBeforeCall(MerchantChannelRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = apiV2ChannelPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Channel
     * Creates a channel that your end users can openly send payments to.
     * @param body  (optional)
     * @return MerchantChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MerchantChannel apiV2ChannelPost(MerchantChannelRequest body) throws ApiException {
        ApiResponse<MerchantChannel> resp = apiV2ChannelPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create Channel
     * Creates a channel that your end users can openly send payments to.
     * @param body  (optional)
     * @return ApiResponse&lt;MerchantChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MerchantChannel> apiV2ChannelPostWithHttpInfo(MerchantChannelRequest body) throws ApiException {
        com.squareup.okhttp.Call call = apiV2ChannelPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<MerchantChannel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Channel (asynchronously)
     * Creates a channel that your end users can openly send payments to.
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV2ChannelPostAsync(MerchantChannelRequest body, final ApiCallback<MerchantChannel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV2ChannelPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MerchantChannel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV2ChannelUuidGet
     * @param uuid The UUID of the channel you are querying (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV2ChannelUuidGetCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v2/channel/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Hawk" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV2ChannelUuidGetValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2ChannelUuidGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV2ChannelUuidGetCall(uuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Channel
     * Retrieves a specific channel by UUID.
     * @param uuid The UUID of the channel you are querying (required)
     * @return MerchantChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MerchantChannel apiV2ChannelUuidGet(String uuid) throws ApiException {
        ApiResponse<MerchantChannel> resp = apiV2ChannelUuidGetWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Get Channel
     * Retrieves a specific channel by UUID.
     * @param uuid The UUID of the channel you are querying (required)
     * @return ApiResponse&lt;MerchantChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MerchantChannel> apiV2ChannelUuidGetWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = apiV2ChannelUuidGetValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<MerchantChannel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Channel (asynchronously)
     * Retrieves a specific channel by UUID.
     * @param uuid The UUID of the channel you are querying (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV2ChannelUuidGetAsync(String uuid, final ApiCallback<MerchantChannel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV2ChannelUuidGetValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MerchantChannel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
