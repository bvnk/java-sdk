/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ExchangeRateDto;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
/**
 * Specify details about transaction (onchain or offchain) linked to the payment
 */
@Schema(description = "Specify details about transaction (onchain or offchain) linked to the payment")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-05T20:47:27.517449+02:00[Africa/Johannesburg]")

public class GatewayTransactionDto {
  @SerializedName("dateCreated")
  private Long dateCreated = null;

  @SerializedName("dateConfirmed")
  private Long dateConfirmed = null;

  @SerializedName("hash")
  private String hash = null;

  @SerializedName("amount")
  private BigDecimal amount = null;

  @SerializedName("risk")
  private Object risk = null;

  @SerializedName("networkFeeCurrency")
  private String networkFeeCurrency = null;

  @SerializedName("networkFeeAmount")
  private BigDecimal networkFeeAmount = null;

  @SerializedName("sources")
  private List<String> sources = null;

  @SerializedName("displayRate")
  private ExchangeRateDto displayRate = null;

  @SerializedName("exchangeRate")
  private ExchangeRateDto exchangeRate = null;

  public GatewayTransactionDto dateCreated(Long dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @Schema(example = "1566203005000", description = "")
  public Long getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(Long dateCreated) {
    this.dateCreated = dateCreated;
  }

  public GatewayTransactionDto dateConfirmed(Long dateConfirmed) {
    this.dateConfirmed = dateConfirmed;
    return this;
  }

   /**
   * Get dateConfirmed
   * @return dateConfirmed
  **/
  @Schema(example = "1566203005000", description = "")
  public Long getDateConfirmed() {
    return dateConfirmed;
  }

  public void setDateConfirmed(Long dateConfirmed) {
    this.dateConfirmed = dateConfirmed;
  }

  public GatewayTransactionDto hash(String hash) {
    this.hash = hash;
    return this;
  }

   /**
   * Transaction hash
   * @return hash
  **/
  @Schema(description = "Transaction hash")
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }

  public GatewayTransactionDto amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * payment amount
   * @return amount
  **/
  @Schema(example = "100.0", description = "payment amount")
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public GatewayTransactionDto risk(Object risk) {
    this.risk = risk;
    return this;
  }

   /**
   * Get risk
   * @return risk
  **/
  @Schema(example = "ETH wallet", description = "")
  public Object getRisk() {
    return risk;
  }

  public void setRisk(Object risk) {
    this.risk = risk;
  }

  public GatewayTransactionDto networkFeeCurrency(String networkFeeCurrency) {
    this.networkFeeCurrency = networkFeeCurrency;
    return this;
  }

   /**
   * currency acronym
   * @return networkFeeCurrency
  **/
  @Schema(example = "BTC", description = "currency acronym")
  public String getNetworkFeeCurrency() {
    return networkFeeCurrency;
  }

  public void setNetworkFeeCurrency(String networkFeeCurrency) {
    this.networkFeeCurrency = networkFeeCurrency;
  }

  public GatewayTransactionDto networkFeeAmount(BigDecimal networkFeeAmount) {
    this.networkFeeAmount = networkFeeAmount;
    return this;
  }

   /**
   * payment amount
   * @return networkFeeAmount
  **/
  @Schema(example = "1.05", description = "payment amount")
  public BigDecimal getNetworkFeeAmount() {
    return networkFeeAmount;
  }

  public void setNetworkFeeAmount(BigDecimal networkFeeAmount) {
    this.networkFeeAmount = networkFeeAmount;
  }

  public GatewayTransactionDto sources(List<String> sources) {
    this.sources = sources;
    return this;
  }

  public GatewayTransactionDto addSourcesItem(String sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<String>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

   /**
   * list of source addresses (only applicable if payment in)
   * @return sources
  **/
  @Schema(description = "list of source addresses (only applicable if payment in)")
  public List<String> getSources() {
    return sources;
  }

  public void setSources(List<String> sources) {
    this.sources = sources;
  }

  public GatewayTransactionDto displayRate(ExchangeRateDto displayRate) {
    this.displayRate = displayRate;
    return this;
  }

   /**
   * Get displayRate
   * @return displayRate
  **/
  @Schema(description = "")
  public ExchangeRateDto getDisplayRate() {
    return displayRate;
  }

  public void setDisplayRate(ExchangeRateDto displayRate) {
    this.displayRate = displayRate;
  }

  public GatewayTransactionDto exchangeRate(ExchangeRateDto exchangeRate) {
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * Get exchangeRate
   * @return exchangeRate
  **/
  @Schema(description = "")
  public ExchangeRateDto getExchangeRate() {
    return exchangeRate;
  }

  public void setExchangeRate(ExchangeRateDto exchangeRate) {
    this.exchangeRate = exchangeRate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayTransactionDto gatewayTransactionDto = (GatewayTransactionDto) o;
    return Objects.equals(this.dateCreated, gatewayTransactionDto.dateCreated) &&
        Objects.equals(this.dateConfirmed, gatewayTransactionDto.dateConfirmed) &&
        Objects.equals(this.hash, gatewayTransactionDto.hash) &&
        Objects.equals(this.amount, gatewayTransactionDto.amount) &&
        Objects.equals(this.risk, gatewayTransactionDto.risk) &&
        Objects.equals(this.networkFeeCurrency, gatewayTransactionDto.networkFeeCurrency) &&
        Objects.equals(this.networkFeeAmount, gatewayTransactionDto.networkFeeAmount) &&
        Objects.equals(this.sources, gatewayTransactionDto.sources) &&
        Objects.equals(this.displayRate, gatewayTransactionDto.displayRate) &&
        Objects.equals(this.exchangeRate, gatewayTransactionDto.exchangeRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateCreated, dateConfirmed, hash, amount, risk, networkFeeCurrency, networkFeeAmount, sources, displayRate, exchangeRate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayTransactionDto {\n");
    
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateConfirmed: ").append(toIndentedString(dateConfirmed)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    risk: ").append(toIndentedString(risk)).append("\n");
    sb.append("    networkFeeCurrency: ").append(toIndentedString(networkFeeCurrency)).append("\n");
    sb.append("    networkFeeAmount: ").append(toIndentedString(networkFeeAmount)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    displayRate: ").append(toIndentedString(displayRate)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
