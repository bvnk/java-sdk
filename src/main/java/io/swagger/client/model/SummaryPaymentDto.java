/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CryptoAddressDto;
import io.swagger.client.model.DirectionDto;
import io.swagger.client.model.ExchangeRateDto;
import io.swagger.client.model.GatewayTransactionDto;
import io.swagger.client.model.PayAmountsDto;
import io.swagger.client.model.PaymentStatusDto;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Contains all the information about a summary payment object
 */
@Schema(description = "Contains all the information about a summary payment object")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-05T20:47:27.517449+02:00[Africa/Johannesburg]")

public class SummaryPaymentDto {
  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("merchantDisplayName")
  private String merchantDisplayName = null;

  @SerializedName("merchantId")
  private String merchantId = null;

  @SerializedName("dateCreated")
  private Long dateCreated = null;

  @SerializedName("expiryDate")
  private Long expiryDate = null;

  @SerializedName("quoteExpiryDate")
  private Long quoteExpiryDate = null;

  @SerializedName("acceptanceExpiryDate")
  private Long acceptanceExpiryDate = null;

  @SerializedName("quoteStatus")
  private String quoteStatus = null;

  @SerializedName("reference")
  private String reference = null;

  @SerializedName("type")
  private DirectionDto type = null;

  /**
   * Payment sub type
   */
  @JsonAdapter(SubTypeEnum.Adapter.class)
  public enum SubTypeEnum {
    @SerializedName("merchantPayIn")
    MERCHANTPAYIN("merchantPayIn"),
    @SerializedName("merchantPayOut")
    MERCHANTPAYOUT("merchantPayOut"),
    @SerializedName("merchantRefund")
    MERCHANTREFUND("merchantRefund");

    private String value;

    SubTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SubTypeEnum fromValue(String input) {
      for (SubTypeEnum b : SubTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SubTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SubTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SubTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("subType")
  private SubTypeEnum subType = SubTypeEnum.MERCHANTPAYIN;

  @SerializedName("status")
  private PaymentStatusDto status = null;

  @SerializedName("displayCurrency")
  private PayAmountsDto displayCurrency = null;

  @SerializedName("walletCurrency")
  private PayAmountsDto walletCurrency = null;

  @SerializedName("paidCurrency")
  private PayAmountsDto paidCurrency = null;

  @SerializedName("feeCurrency")
  private PayAmountsDto feeCurrency = null;

  @SerializedName("displayRate")
  private ExchangeRateDto displayRate = null;

  @SerializedName("exchangeRate")
  private ExchangeRateDto exchangeRate = null;

  @SerializedName("address")
  private CryptoAddressDto address = null;

  @SerializedName("returnUrl")
  private String returnUrl = null;

  @SerializedName("redirectUrl")
  private String redirectUrl = null;

  @SerializedName("transactions")
  private List<GatewayTransactionDto> transactions = null;

  @SerializedName("refund")
  private Object refund = null;

  @SerializedName("refunds")
  private List<Object> refunds = null;

  public SummaryPaymentDto uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * unique identifier for the merchant payment
   * @return uuid
  **/
  @Schema(example = "3A6FAFFA-F21D-416E-B17E-2529A9BC44A0", description = "unique identifier for the merchant payment")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public SummaryPaymentDto merchantDisplayName(String merchantDisplayName) {
    this.merchantDisplayName = merchantDisplayName;
    return this;
  }

   /**
   * display name for the merchant payment
   * @return merchantDisplayName
  **/
  @Schema(example = "Test Merchant Name", description = "display name for the merchant payment")
  public String getMerchantDisplayName() {
    return merchantDisplayName;
  }

  public void setMerchantDisplayName(String merchantDisplayName) {
    this.merchantDisplayName = merchantDisplayName;
  }

  public SummaryPaymentDto merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Your Merchant ID. You can find it on the Merchant Details page in your account
   * @return merchantId
  **/
  @Schema(example = "5C8D8D78-366A-4AFB-B658-A64CE543C5DB", description = "Your Merchant ID. You can find it on the Merchant Details page in your account")
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }

  public SummaryPaymentDto dateCreated(Long dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Currently this is a long - can it be changed? Date and times are encoded into UNIX epoch timestamps
   * @return dateCreated
  **/
  @Schema(example = "1566203005000", description = "Currently this is a long - can it be changed? Date and times are encoded into UNIX epoch timestamps")
  public Long getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(Long dateCreated) {
    this.dateCreated = dateCreated;
  }

  public SummaryPaymentDto expiryDate(Long expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Date and times are encoded into UNIX epoch timestamps
   * @return expiryDate
  **/
  @Schema(example = "1566203005000", description = "Date and times are encoded into UNIX epoch timestamps")
  public Long getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(Long expiryDate) {
    this.expiryDate = expiryDate;
  }

  public SummaryPaymentDto quoteExpiryDate(Long quoteExpiryDate) {
    this.quoteExpiryDate = quoteExpiryDate;
    return this;
  }

   /**
   * Date and times are encoded into UNIX epoch timestamps
   * @return quoteExpiryDate
  **/
  @Schema(example = "1566203005000", description = "Date and times are encoded into UNIX epoch timestamps")
  public Long getQuoteExpiryDate() {
    return quoteExpiryDate;
  }

  public void setQuoteExpiryDate(Long quoteExpiryDate) {
    this.quoteExpiryDate = quoteExpiryDate;
  }

  public SummaryPaymentDto acceptanceExpiryDate(Long acceptanceExpiryDate) {
    this.acceptanceExpiryDate = acceptanceExpiryDate;
    return this;
  }

   /**
   * Date and times are encoded into UNIX epoch timestamps
   * @return acceptanceExpiryDate
  **/
  @Schema(example = "1566203005000", description = "Date and times are encoded into UNIX epoch timestamps")
  public Long getAcceptanceExpiryDate() {
    return acceptanceExpiryDate;
  }

  public void setAcceptanceExpiryDate(Long acceptanceExpiryDate) {
    this.acceptanceExpiryDate = acceptanceExpiryDate;
  }

  public SummaryPaymentDto quoteStatus(String quoteStatus) {
    this.quoteStatus = quoteStatus;
    return this;
  }

   /**
   * Get quoteStatus
   * @return quoteStatus
  **/
  @Schema(description = "")
  public String getQuoteStatus() {
    return quoteStatus;
  }

  public void setQuoteStatus(String quoteStatus) {
    this.quoteStatus = quoteStatus;
  }

  public SummaryPaymentDto reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Your payment reference ID. Feel free to submit any ID to tie the payment to your customer
   * @return reference
  **/
  @Schema(example = "myUniqueRef333", description = "Your payment reference ID. Feel free to submit any ID to tie the payment to your customer")
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }

  public SummaryPaymentDto type(DirectionDto type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public DirectionDto getType() {
    return type;
  }

  public void setType(DirectionDto type) {
    this.type = type;
  }

  public SummaryPaymentDto subType(SubTypeEnum subType) {
    this.subType = subType;
    return this;
  }

   /**
   * Payment sub type
   * @return subType
  **/
  @Schema(description = "Payment sub type")
  public SubTypeEnum getSubType() {
    return subType;
  }

  public void setSubType(SubTypeEnum subType) {
    this.subType = subType;
  }

  public SummaryPaymentDto status(PaymentStatusDto status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public PaymentStatusDto getStatus() {
    return status;
  }

  public void setStatus(PaymentStatusDto status) {
    this.status = status;
  }

  public SummaryPaymentDto displayCurrency(PayAmountsDto displayCurrency) {
    this.displayCurrency = displayCurrency;
    return this;
  }

   /**
   * Get displayCurrency
   * @return displayCurrency
  **/
  @Schema(description = "")
  public PayAmountsDto getDisplayCurrency() {
    return displayCurrency;
  }

  public void setDisplayCurrency(PayAmountsDto displayCurrency) {
    this.displayCurrency = displayCurrency;
  }

  public SummaryPaymentDto walletCurrency(PayAmountsDto walletCurrency) {
    this.walletCurrency = walletCurrency;
    return this;
  }

   /**
   * Get walletCurrency
   * @return walletCurrency
  **/
  @Schema(description = "")
  public PayAmountsDto getWalletCurrency() {
    return walletCurrency;
  }

  public void setWalletCurrency(PayAmountsDto walletCurrency) {
    this.walletCurrency = walletCurrency;
  }

  public SummaryPaymentDto paidCurrency(PayAmountsDto paidCurrency) {
    this.paidCurrency = paidCurrency;
    return this;
  }

   /**
   * Get paidCurrency
   * @return paidCurrency
  **/
  @Schema(description = "")
  public PayAmountsDto getPaidCurrency() {
    return paidCurrency;
  }

  public void setPaidCurrency(PayAmountsDto paidCurrency) {
    this.paidCurrency = paidCurrency;
  }

  public SummaryPaymentDto feeCurrency(PayAmountsDto feeCurrency) {
    this.feeCurrency = feeCurrency;
    return this;
  }

   /**
   * Get feeCurrency
   * @return feeCurrency
  **/
  @Schema(description = "")
  public PayAmountsDto getFeeCurrency() {
    return feeCurrency;
  }

  public void setFeeCurrency(PayAmountsDto feeCurrency) {
    this.feeCurrency = feeCurrency;
  }

  public SummaryPaymentDto displayRate(ExchangeRateDto displayRate) {
    this.displayRate = displayRate;
    return this;
  }

   /**
   * Get displayRate
   * @return displayRate
  **/
  @Schema(description = "")
  public ExchangeRateDto getDisplayRate() {
    return displayRate;
  }

  public void setDisplayRate(ExchangeRateDto displayRate) {
    this.displayRate = displayRate;
  }

  public SummaryPaymentDto exchangeRate(ExchangeRateDto exchangeRate) {
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * Get exchangeRate
   * @return exchangeRate
  **/
  @Schema(description = "")
  public ExchangeRateDto getExchangeRate() {
    return exchangeRate;
  }

  public void setExchangeRate(ExchangeRateDto exchangeRate) {
    this.exchangeRate = exchangeRate;
  }

  public SummaryPaymentDto address(CryptoAddressDto address) {
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @Schema(description = "")
  public CryptoAddressDto getAddress() {
    return address;
  }

  public void setAddress(CryptoAddressDto address) {
    this.address = address;
  }

  public SummaryPaymentDto returnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
    return this;
  }

   /**
   * URL that the customer will be redirected to if they click a \&quot;Back to Merchant\&quot; button on the payment web page
   * @return returnUrl
  **/
  @Schema(example = "https://my-shop.com/payment-complete?ref=xyz", description = "URL that the customer will be redirected to if they click a \"Back to Merchant\" button on the payment web page")
  public String getReturnUrl() {
    return returnUrl;
  }

  public void setReturnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
  }

  public SummaryPaymentDto redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * URL to the payment page that you can redirect your customers to
   * @return redirectUrl
  **/
  @Schema(example = "https://pay.bvnk.com/payin?uuid=3A6FAFFA-F21D-416E-B17E-2529A9BC44A0", description = "URL to the payment page that you can redirect your customers to")
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }

  public SummaryPaymentDto transactions(List<GatewayTransactionDto> transactions) {
    this.transactions = transactions;
    return this;
  }

  public SummaryPaymentDto addTransactionsItem(GatewayTransactionDto transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<GatewayTransactionDto>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Get transactions
   * @return transactions
  **/
  @Schema(description = "")
  public List<GatewayTransactionDto> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<GatewayTransactionDto> transactions) {
    this.transactions = transactions;
  }

  public SummaryPaymentDto refund(Object refund) {
    this.refund = refund;
    return this;
  }

   /**
   * The payment this object is a refund of. This should reference the pay in that this refund was created for
   * @return refund
  **/
  @Schema(description = "The payment this object is a refund of. This should reference the pay in that this refund was created for")
  public Object getRefund() {
    return refund;
  }

  public void setRefund(Object refund) {
    this.refund = refund;
  }

  public SummaryPaymentDto refunds(List<Object> refunds) {
    this.refunds = refunds;
    return this;
  }

  public SummaryPaymentDto addRefundsItem(Object refundsItem) {
    if (this.refunds == null) {
      this.refunds = new ArrayList<Object>();
    }
    this.refunds.add(refundsItem);
    return this;
  }

   /**
   * Refunds that have been requested for this payment. This should reference the refund payout for this pay in
   * @return refunds
  **/
  @Schema(description = "Refunds that have been requested for this payment. This should reference the refund payout for this pay in")
  public List<Object> getRefunds() {
    return refunds;
  }

  public void setRefunds(List<Object> refunds) {
    this.refunds = refunds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SummaryPaymentDto summaryPaymentDto = (SummaryPaymentDto) o;
    return Objects.equals(this.uuid, summaryPaymentDto.uuid) &&
        Objects.equals(this.merchantDisplayName, summaryPaymentDto.merchantDisplayName) &&
        Objects.equals(this.merchantId, summaryPaymentDto.merchantId) &&
        Objects.equals(this.dateCreated, summaryPaymentDto.dateCreated) &&
        Objects.equals(this.expiryDate, summaryPaymentDto.expiryDate) &&
        Objects.equals(this.quoteExpiryDate, summaryPaymentDto.quoteExpiryDate) &&
        Objects.equals(this.acceptanceExpiryDate, summaryPaymentDto.acceptanceExpiryDate) &&
        Objects.equals(this.quoteStatus, summaryPaymentDto.quoteStatus) &&
        Objects.equals(this.reference, summaryPaymentDto.reference) &&
        Objects.equals(this.type, summaryPaymentDto.type) &&
        Objects.equals(this.subType, summaryPaymentDto.subType) &&
        Objects.equals(this.status, summaryPaymentDto.status) &&
        Objects.equals(this.displayCurrency, summaryPaymentDto.displayCurrency) &&
        Objects.equals(this.walletCurrency, summaryPaymentDto.walletCurrency) &&
        Objects.equals(this.paidCurrency, summaryPaymentDto.paidCurrency) &&
        Objects.equals(this.feeCurrency, summaryPaymentDto.feeCurrency) &&
        Objects.equals(this.displayRate, summaryPaymentDto.displayRate) &&
        Objects.equals(this.exchangeRate, summaryPaymentDto.exchangeRate) &&
        Objects.equals(this.address, summaryPaymentDto.address) &&
        Objects.equals(this.returnUrl, summaryPaymentDto.returnUrl) &&
        Objects.equals(this.redirectUrl, summaryPaymentDto.redirectUrl) &&
        Objects.equals(this.transactions, summaryPaymentDto.transactions) &&
        Objects.equals(this.refund, summaryPaymentDto.refund) &&
        Objects.equals(this.refunds, summaryPaymentDto.refunds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, merchantDisplayName, merchantId, dateCreated, expiryDate, quoteExpiryDate, acceptanceExpiryDate, quoteStatus, reference, type, subType, status, displayCurrency, walletCurrency, paidCurrency, feeCurrency, displayRate, exchangeRate, address, returnUrl, redirectUrl, transactions, refund, refunds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SummaryPaymentDto {\n");
    
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    merchantDisplayName: ").append(toIndentedString(merchantDisplayName)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    quoteExpiryDate: ").append(toIndentedString(quoteExpiryDate)).append("\n");
    sb.append("    acceptanceExpiryDate: ").append(toIndentedString(acceptanceExpiryDate)).append("\n");
    sb.append("    quoteStatus: ").append(toIndentedString(quoteStatus)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    displayCurrency: ").append(toIndentedString(displayCurrency)).append("\n");
    sb.append("    walletCurrency: ").append(toIndentedString(walletCurrency)).append("\n");
    sb.append("    paidCurrency: ").append(toIndentedString(paidCurrency)).append("\n");
    sb.append("    feeCurrency: ").append(toIndentedString(feeCurrency)).append("\n");
    sb.append("    displayRate: ").append(toIndentedString(displayRate)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    returnUrl: ").append(toIndentedString(returnUrl)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    refund: ").append(toIndentedString(refund)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
