/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * MerchantChannelRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-05T20:47:27.517449+02:00[Africa/Johannesburg]")

public class MerchantChannelRequest {
  @SerializedName("merchantId")
  private String merchantId = "0a12a214-1619-43fa-9be1-0029f6a440a0";

  @SerializedName("payCurrency")
  private String payCurrency = "ETH";

  @SerializedName("displayCurrency")
  private String displayCurrency = "EUR";

  @SerializedName("reference")
  private String reference = "c1b933d5-3354-4f83-a05f-0b53f1be85f2";

  public MerchantChannelRequest merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * The merchant ID that you are creating the channel on.
   * @return merchantId
  **/
  @Schema(required = true, description = "The merchant ID that you are creating the channel on.")
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }

  public MerchantChannelRequest payCurrency(String payCurrency) {
    this.payCurrency = payCurrency;
    return this;
  }

   /**
   * Cryptocurrency code that the channel will operate on.
   * @return payCurrency
  **/
  @Schema(required = true, description = "Cryptocurrency code that the channel will operate on.")
  public String getPayCurrency() {
    return payCurrency;
  }

  public void setPayCurrency(String payCurrency) {
    this.payCurrency = payCurrency;
  }

  public MerchantChannelRequest displayCurrency(String displayCurrency) {
    this.displayCurrency = displayCurrency;
    return this;
  }

   /**
   * The currency which pricing will be displayed to the end user in (can be the same as payCurrency, or can be different).
   * @return displayCurrency
  **/
  @Schema(required = true, description = "The currency which pricing will be displayed to the end user in (can be the same as payCurrency, or can be different).")
  public String getDisplayCurrency() {
    return displayCurrency;
  }

  public void setDisplayCurrency(String displayCurrency) {
    this.displayCurrency = displayCurrency;
  }

  public MerchantChannelRequest reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * An external reference for the channel that your customer will see.
   * @return reference
  **/
  @Schema(required = true, description = "An external reference for the channel that your customer will see.")
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantChannelRequest merchantChannelRequest = (MerchantChannelRequest) o;
    return Objects.equals(this.merchantId, merchantChannelRequest.merchantId) &&
        Objects.equals(this.payCurrency, merchantChannelRequest.payCurrency) &&
        Objects.equals(this.displayCurrency, merchantChannelRequest.displayCurrency) &&
        Objects.equals(this.reference, merchantChannelRequest.reference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantId, payCurrency, displayCurrency, reference);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantChannelRequest {\n");
    
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    payCurrency: ").append(toIndentedString(payCurrency)).append("\n");
    sb.append("    displayCurrency: ").append(toIndentedString(displayCurrency)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
