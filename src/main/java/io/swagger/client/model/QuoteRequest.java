/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * QuoteRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-05T20:47:27.517449+02:00[Africa/Johannesburg]")

public class QuoteRequest {
  @SerializedName("from")
  private String from = "EUR";

  @SerializedName("to")
  private String to = "USDC";

  @SerializedName("fromWallet")
  private BigDecimal fromWallet = new BigDecimal(3598236);

  @SerializedName("useMinimum")
  private Boolean useMinimum = false;

  @SerializedName("useMaximum")
  private Boolean useMaximum = false;

  @SerializedName("toWallet")
  private BigDecimal toWallet = new BigDecimal(3598514);

  @SerializedName("amountIn")
  private BigDecimal amountIn = new BigDecimal(10);

  @SerializedName("payInMethod")
  private String payInMethod = "wallet";

  @SerializedName("payOutMethod")
  private String payOutMethod = "wallet";

  public QuoteRequest from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @Schema(required = true, description = "")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public QuoteRequest to(String to) {
    this.to = to;
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @Schema(required = true, description = "")
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public QuoteRequest fromWallet(BigDecimal fromWallet) {
    this.fromWallet = fromWallet;
    return this;
  }

   /**
   * Get fromWallet
   * @return fromWallet
  **/
  @Schema(required = true, description = "")
  public BigDecimal getFromWallet() {
    return fromWallet;
  }

  public void setFromWallet(BigDecimal fromWallet) {
    this.fromWallet = fromWallet;
  }

  public QuoteRequest useMinimum(Boolean useMinimum) {
    this.useMinimum = useMinimum;
    return this;
  }

   /**
   * Get useMinimum
   * @return useMinimum
  **/
  @Schema(required = true, description = "")
  public Boolean isUseMinimum() {
    return useMinimum;
  }

  public void setUseMinimum(Boolean useMinimum) {
    this.useMinimum = useMinimum;
  }

  public QuoteRequest useMaximum(Boolean useMaximum) {
    this.useMaximum = useMaximum;
    return this;
  }

   /**
   * Get useMaximum
   * @return useMaximum
  **/
  @Schema(required = true, description = "")
  public Boolean isUseMaximum() {
    return useMaximum;
  }

  public void setUseMaximum(Boolean useMaximum) {
    this.useMaximum = useMaximum;
  }

  public QuoteRequest toWallet(BigDecimal toWallet) {
    this.toWallet = toWallet;
    return this;
  }

   /**
   * Get toWallet
   * @return toWallet
  **/
  @Schema(required = true, description = "")
  public BigDecimal getToWallet() {
    return toWallet;
  }

  public void setToWallet(BigDecimal toWallet) {
    this.toWallet = toWallet;
  }

  public QuoteRequest amountIn(BigDecimal amountIn) {
    this.amountIn = amountIn;
    return this;
  }

   /**
   * Get amountIn
   * @return amountIn
  **/
  @Schema(required = true, description = "")
  public BigDecimal getAmountIn() {
    return amountIn;
  }

  public void setAmountIn(BigDecimal amountIn) {
    this.amountIn = amountIn;
  }

  public QuoteRequest payInMethod(String payInMethod) {
    this.payInMethod = payInMethod;
    return this;
  }

   /**
   * Get payInMethod
   * @return payInMethod
  **/
  @Schema(required = true, description = "")
  public String getPayInMethod() {
    return payInMethod;
  }

  public void setPayInMethod(String payInMethod) {
    this.payInMethod = payInMethod;
  }

  public QuoteRequest payOutMethod(String payOutMethod) {
    this.payOutMethod = payOutMethod;
    return this;
  }

   /**
   * Get payOutMethod
   * @return payOutMethod
  **/
  @Schema(required = true, description = "")
  public String getPayOutMethod() {
    return payOutMethod;
  }

  public void setPayOutMethod(String payOutMethod) {
    this.payOutMethod = payOutMethod;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteRequest quoteRequest = (QuoteRequest) o;
    return Objects.equals(this.from, quoteRequest.from) &&
        Objects.equals(this.to, quoteRequest.to) &&
        Objects.equals(this.fromWallet, quoteRequest.fromWallet) &&
        Objects.equals(this.useMinimum, quoteRequest.useMinimum) &&
        Objects.equals(this.useMaximum, quoteRequest.useMaximum) &&
        Objects.equals(this.toWallet, quoteRequest.toWallet) &&
        Objects.equals(this.amountIn, quoteRequest.amountIn) &&
        Objects.equals(this.payInMethod, quoteRequest.payInMethod) &&
        Objects.equals(this.payOutMethod, quoteRequest.payOutMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, to, fromWallet, useMinimum, useMaximum, toWallet, amountIn, payInMethod, payOutMethod);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteRequest {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    fromWallet: ").append(toIndentedString(fromWallet)).append("\n");
    sb.append("    useMinimum: ").append(toIndentedString(useMinimum)).append("\n");
    sb.append("    useMaximum: ").append(toIndentedString(useMaximum)).append("\n");
    sb.append("    toWallet: ").append(toIndentedString(toWallet)).append("\n");
    sb.append("    amountIn: ").append(toIndentedString(amountIn)).append("\n");
    sb.append("    payInMethod: ").append(toIndentedString(payInMethod)).append("\n");
    sb.append("    payOutMethod: ").append(toIndentedString(payOutMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
