/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Merchant;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CurrenciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CurrenciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CurrenciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listCurrenciesCrypto
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param allowDeposits list currencies that only allow deposits (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCurrenciesCryptoCall(BigDecimal offset, BigDecimal max, Boolean allowDeposits, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/currency/crypto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (allowDeposits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowDeposits", allowDeposits));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCurrenciesCryptoValidateBeforeCall(BigDecimal offset, BigDecimal max, Boolean allowDeposits, final ApiCallback _callback) throws ApiException {
        return listCurrenciesCryptoCall(offset, max, allowDeposits, _callback);

    }

    /**
     * List Crypto Currencies
     * Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param allowDeposits list currencies that only allow deposits (optional, default to false)
     * @return List&lt;Merchant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<Merchant> listCurrenciesCrypto(BigDecimal offset, BigDecimal max, Boolean allowDeposits) throws ApiException {
        ApiResponse<List<Merchant>> localVarResp = listCurrenciesCryptoWithHttpInfo(offset, max, allowDeposits);
        return localVarResp.getData();
    }

    /**
     * List Crypto Currencies
     * Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param allowDeposits list currencies that only allow deposits (optional, default to false)
     * @return ApiResponse&lt;List&lt;Merchant&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Merchant>> listCurrenciesCryptoWithHttpInfo(BigDecimal offset, BigDecimal max, Boolean allowDeposits) throws ApiException {
        okhttp3.Call localVarCall = listCurrenciesCryptoValidateBeforeCall(offset, max, allowDeposits, null);
        Type localVarReturnType = new TypeToken<List<Merchant>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Crypto Currencies (asynchronously)
     * Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param allowDeposits list currencies that only allow deposits (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCurrenciesCryptoAsync(BigDecimal offset, BigDecimal max, Boolean allowDeposits, final ApiCallback<List<Merchant>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCurrenciesCryptoValidateBeforeCall(offset, max, allowDeposits, _callback);
        Type localVarReturnType = new TypeToken<List<Merchant>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCurrenciesDeposit
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCurrenciesDepositCall(BigDecimal offset, BigDecimal max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/currency/deposit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCurrenciesDepositValidateBeforeCall(BigDecimal offset, BigDecimal max, final ApiCallback _callback) throws ApiException {
        return listCurrenciesDepositCall(offset, max, _callback);

    }

    /**
     * List Wallet Currencies
     * These are the currencies that can be used to create a new wallet.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @return List&lt;Merchant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<Merchant> listCurrenciesDeposit(BigDecimal offset, BigDecimal max) throws ApiException {
        ApiResponse<List<Merchant>> localVarResp = listCurrenciesDepositWithHttpInfo(offset, max);
        return localVarResp.getData();
    }

    /**
     * List Wallet Currencies
     * These are the currencies that can be used to create a new wallet.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @return ApiResponse&lt;List&lt;Merchant&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Merchant>> listCurrenciesDepositWithHttpInfo(BigDecimal offset, BigDecimal max) throws ApiException {
        okhttp3.Call localVarCall = listCurrenciesDepositValidateBeforeCall(offset, max, null);
        Type localVarReturnType = new TypeToken<List<Merchant>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Wallet Currencies (asynchronously)
     * These are the currencies that can be used to create a new wallet.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCurrenciesDepositAsync(BigDecimal offset, BigDecimal max, final ApiCallback<List<Merchant>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCurrenciesDepositValidateBeforeCall(offset, max, _callback);
        Type localVarReturnType = new TypeToken<List<Merchant>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCurrenciesFiat
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param usable list currencies that are usable (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCurrenciesFiatCall(BigDecimal offset, BigDecimal max, Boolean usable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/currency/fiat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (usable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usable", usable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCurrenciesFiatValidateBeforeCall(BigDecimal offset, BigDecimal max, Boolean usable, final ApiCallback _callback) throws ApiException {
        return listCurrenciesFiatCall(offset, max, usable, _callback);

    }

    /**
     * List Fiat Currencies
     * Retrieves a list of all display fiat currencies available on BVNK&#39;s Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param usable list currencies that are usable (optional, default to false)
     * @return List&lt;Merchant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<Merchant> listCurrenciesFiat(BigDecimal offset, BigDecimal max, Boolean usable) throws ApiException {
        ApiResponse<List<Merchant>> localVarResp = listCurrenciesFiatWithHttpInfo(offset, max, usable);
        return localVarResp.getData();
    }

    /**
     * List Fiat Currencies
     * Retrieves a list of all display fiat currencies available on BVNK&#39;s Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param usable list currencies that are usable (optional, default to false)
     * @return ApiResponse&lt;List&lt;Merchant&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Merchant>> listCurrenciesFiatWithHttpInfo(BigDecimal offset, BigDecimal max, Boolean usable) throws ApiException {
        okhttp3.Call localVarCall = listCurrenciesFiatValidateBeforeCall(offset, max, usable, null);
        Type localVarReturnType = new TypeToken<List<Merchant>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Fiat Currencies (asynchronously)
     * Retrieves a list of all display fiat currencies available on BVNK&#39;s Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
     * @param offset Offset (optional, default to 0)
     * @param max Maximum number of items in response (optional, default to 200)
     * @param usable list currencies that are usable (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCurrenciesFiatAsync(BigDecimal offset, BigDecimal max, Boolean usable, final ApiCallback<List<Merchant>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCurrenciesFiatValidateBeforeCall(offset, max, usable, _callback);
        Type localVarReturnType = new TypeToken<List<Merchant>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
