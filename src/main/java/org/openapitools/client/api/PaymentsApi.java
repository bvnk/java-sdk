/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.ClientValidationErrorDto;
import org.openapitools.client.model.PayOutDetailDto;
import org.openapitools.client.model.PayRequestDto;
import org.openapitools.client.model.PaymentStatusDto;
import org.openapitools.client.model.ServerErrorDto;
import org.openapitools.client.model.SummaryPaymentDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PaymentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV1PaySummaryGet
     * @param merchantId Merchant identifier (required)
     * @param customerReference Customer reference (optional)
     * @param paymentExternalId Merchant payment uuid (optional)
     * @param fromDate Start date (optional)
     * @param toDate End date (optional)
     * @param offset Offset (optional)
     * @param max Maximum number of items in response (optional)
     * @param status  (optional)
     * @param order Ordering direction (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PaySummaryGetCall(String merchantId, String customerReference, String paymentExternalId, String fromDate, String toDate, BigDecimal offset, BigDecimal max, PaymentStatusDto status, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/pay/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (merchantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchantId", merchantId));
        }

        if (customerReference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerReference", customerReference));
        }

        if (paymentExternalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentExternalId", paymentExternalId));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Hawk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1PaySummaryGetValidateBeforeCall(String merchantId, String customerReference, String paymentExternalId, String fromDate, String toDate, BigDecimal offset, BigDecimal max, PaymentStatusDto status, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling apiV1PaySummaryGet(Async)");
        }

        return apiV1PaySummaryGetCall(merchantId, customerReference, paymentExternalId, fromDate, toDate, offset, max, status, order, _callback);

    }

    /**
     * List Payments
     * Retrieves a list of payments on a specific Merchant ID
     * @param merchantId Merchant identifier (required)
     * @param customerReference Customer reference (optional)
     * @param paymentExternalId Merchant payment uuid (optional)
     * @param fromDate Start date (optional)
     * @param toDate End date (optional)
     * @param offset Offset (optional)
     * @param max Maximum number of items in response (optional)
     * @param status  (optional)
     * @param order Ordering direction (optional)
     * @return List&lt;SummaryPaymentDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public List<SummaryPaymentDto> apiV1PaySummaryGet(String merchantId, String customerReference, String paymentExternalId, String fromDate, String toDate, BigDecimal offset, BigDecimal max, PaymentStatusDto status, String order) throws ApiException {
        ApiResponse<List<SummaryPaymentDto>> localVarResp = apiV1PaySummaryGetWithHttpInfo(merchantId, customerReference, paymentExternalId, fromDate, toDate, offset, max, status, order);
        return localVarResp.getData();
    }

    /**
     * List Payments
     * Retrieves a list of payments on a specific Merchant ID
     * @param merchantId Merchant identifier (required)
     * @param customerReference Customer reference (optional)
     * @param paymentExternalId Merchant payment uuid (optional)
     * @param fromDate Start date (optional)
     * @param toDate End date (optional)
     * @param offset Offset (optional)
     * @param max Maximum number of items in response (optional)
     * @param status  (optional)
     * @param order Ordering direction (optional)
     * @return ApiResponse&lt;List&lt;SummaryPaymentDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SummaryPaymentDto>> apiV1PaySummaryGetWithHttpInfo(String merchantId, String customerReference, String paymentExternalId, String fromDate, String toDate, BigDecimal offset, BigDecimal max, PaymentStatusDto status, String order) throws ApiException {
        okhttp3.Call localVarCall = apiV1PaySummaryGetValidateBeforeCall(merchantId, customerReference, paymentExternalId, fromDate, toDate, offset, max, status, order, null);
        Type localVarReturnType = new TypeToken<List<SummaryPaymentDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Payments (asynchronously)
     * Retrieves a list of payments on a specific Merchant ID
     * @param merchantId Merchant identifier (required)
     * @param customerReference Customer reference (optional)
     * @param paymentExternalId Merchant payment uuid (optional)
     * @param fromDate Start date (optional)
     * @param toDate End date (optional)
     * @param offset Offset (optional)
     * @param max Maximum number of items in response (optional)
     * @param status  (optional)
     * @param order Ordering direction (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PaySummaryGetAsync(String merchantId, String customerReference, String paymentExternalId, String fromDate, String toDate, BigDecimal offset, BigDecimal max, PaymentStatusDto status, String order, final ApiCallback<List<SummaryPaymentDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1PaySummaryGetValidateBeforeCall(merchantId, customerReference, paymentExternalId, fromDate, toDate, offset, max, status, order, _callback);
        Type localVarReturnType = new TypeToken<List<SummaryPaymentDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1PaySummaryPost
     * @param payRequestDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PaySummaryPostCall(PayRequestDto payRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payRequestDto;

        // create path and map variables
        String localVarPath = "/api/v1/pay/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Hawk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1PaySummaryPostValidateBeforeCall(PayRequestDto payRequestDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payRequestDto' is set
        if (payRequestDto == null) {
            throw new ApiException("Missing the required parameter 'payRequestDto' when calling apiV1PaySummaryPost(Async)");
        }

        return apiV1PaySummaryPostCall(payRequestDto, _callback);

    }

    /**
     * Create payment
     * Creates a payment, either type IN or type OUT.
     * @param payRequestDto  (required)
     * @return SummaryPaymentDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public SummaryPaymentDto apiV1PaySummaryPost(PayRequestDto payRequestDto) throws ApiException {
        ApiResponse<SummaryPaymentDto> localVarResp = apiV1PaySummaryPostWithHttpInfo(payRequestDto);
        return localVarResp.getData();
    }

    /**
     * Create payment
     * Creates a payment, either type IN or type OUT.
     * @param payRequestDto  (required)
     * @return ApiResponse&lt;SummaryPaymentDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SummaryPaymentDto> apiV1PaySummaryPostWithHttpInfo(PayRequestDto payRequestDto) throws ApiException {
        okhttp3.Call localVarCall = apiV1PaySummaryPostValidateBeforeCall(payRequestDto, null);
        Type localVarReturnType = new TypeToken<SummaryPaymentDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create payment (asynchronously)
     * Creates a payment, either type IN or type OUT.
     * @param payRequestDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PaySummaryPostAsync(PayRequestDto payRequestDto, final ApiCallback<SummaryPaymentDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1PaySummaryPostValidateBeforeCall(payRequestDto, _callback);
        Type localVarReturnType = new TypeToken<SummaryPaymentDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1PayUuidSummaryGet
     * @param uuid merchant payment uuid (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PayUuidSummaryGetCall(String uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/pay/{uuid}/summary"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Hawk" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1PayUuidSummaryGetValidateBeforeCall(String uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV1PayUuidSummaryGet(Async)");
        }

        return apiV1PayUuidSummaryGetCall(uuid, _callback);

    }

    /**
     * Get Payment
     * Retrieves details of a specific payment using the UUID of the payment.
     * @param uuid merchant payment uuid (required)
     * @return SummaryPaymentDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public SummaryPaymentDto apiV1PayUuidSummaryGet(String uuid) throws ApiException {
        ApiResponse<SummaryPaymentDto> localVarResp = apiV1PayUuidSummaryGetWithHttpInfo(uuid);
        return localVarResp.getData();
    }

    /**
     * Get Payment
     * Retrieves details of a specific payment using the UUID of the payment.
     * @param uuid merchant payment uuid (required)
     * @return ApiResponse&lt;SummaryPaymentDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SummaryPaymentDto> apiV1PayUuidSummaryGetWithHttpInfo(String uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV1PayUuidSummaryGetValidateBeforeCall(uuid, null);
        Type localVarReturnType = new TypeToken<SummaryPaymentDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment (asynchronously)
     * Retrieves details of a specific payment using the UUID of the payment.
     * @param uuid merchant payment uuid (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PayUuidSummaryGetAsync(String uuid, final ApiCallback<SummaryPaymentDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1PayUuidSummaryGetValidateBeforeCall(uuid, _callback);
        Type localVarReturnType = new TypeToken<SummaryPaymentDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1PayValidatePut
     * @param payOutDetailDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PayValidatePutCall(PayOutDetailDto payOutDetailDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payOutDetailDto;

        // create path and map variables
        String localVarPath = "/api/v1/pay/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1PayValidatePutValidateBeforeCall(PayOutDetailDto payOutDetailDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payOutDetailDto' is set
        if (payOutDetailDto == null) {
            throw new ApiException("Missing the required parameter 'payOutDetailDto' when calling apiV1PayValidatePut(Async)");
        }

        return apiV1PayValidatePutCall(payOutDetailDto, _callback);

    }

    /**
     * Validate Address
     * Validates that a crypto address is correct.  Use this endpoint to validate that an address exists, is correctly formatted, and includes all the required data. This endpoint can help prevent your end users losing funds when submitting a payout.
     * @param payOutDetailDto  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1PayValidatePut(PayOutDetailDto payOutDetailDto) throws ApiException {
        apiV1PayValidatePutWithHttpInfo(payOutDetailDto);
    }

    /**
     * Validate Address
     * Validates that a crypto address is correct.  Use this endpoint to validate that an address exists, is correctly formatted, and includes all the required data. This endpoint can help prevent your end users losing funds when submitting a payout.
     * @param payOutDetailDto  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1PayValidatePutWithHttpInfo(PayOutDetailDto payOutDetailDto) throws ApiException {
        okhttp3.Call localVarCall = apiV1PayValidatePutValidateBeforeCall(payOutDetailDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate Address (asynchronously)
     * Validates that a crypto address is correct.  Use this endpoint to validate that an address exists, is correctly formatted, and includes all the required data. This endpoint can help prevent your end users losing funds when submitting a payout.
     * @param payOutDetailDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PayValidatePutAsync(PayOutDetailDto payOutDetailDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1PayValidatePutValidateBeforeCall(payOutDetailDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
