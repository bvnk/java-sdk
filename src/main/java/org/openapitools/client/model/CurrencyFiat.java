/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CurrencyFiat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-05T21:04:47.186508+02:00[Africa/Johannesburg]")
public class CurrencyFiat {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DEPOSIT_FEE = "depositFee";
  @SerializedName(SERIALIZED_NAME_DEPOSIT_FEE)
  private BigDecimal depositFee;

  public static final String SERIALIZED_NAME_FIAT = "fiat";
  @SerializedName(SERIALIZED_NAME_FIAT)
  private Boolean fiat = true;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Object options;

  public static final String SERIALIZED_NAME_PRICE_PRECISION = "pricePrecision";
  @SerializedName(SERIALIZED_NAME_PRICE_PRECISION)
  private Integer pricePrecision = 2;

  public static final String SERIALIZED_NAME_PROTOCOLS = "protocols";
  @SerializedName(SERIALIZED_NAME_PROTOCOLS)
  private List<Object> protocols;

  public static final String SERIALIZED_NAME_QUANTITY_PRECISION = "quantityPrecision";
  @SerializedName(SERIALIZED_NAME_QUANTITY_PRECISION)
  private Integer quantityPrecision = 2;

  public static final String SERIALIZED_NAME_SUPPORTS_DEPOSITS = "supportsDeposits";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_DEPOSITS)
  private Boolean supportsDeposits = true;

  public static final String SERIALIZED_NAME_SUPPORTS_WITHDRAWALS = "supportsWithdrawals";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_WITHDRAWALS)
  private Boolean supportsWithdrawals = true;

  public static final String SERIALIZED_NAME_WITHDRAWAL_FEE = "withdrawalFee";
  @SerializedName(SERIALIZED_NAME_WITHDRAWAL_FEE)
  private BigDecimal withdrawalFee;

  public static final String SERIALIZED_NAME_WITHDRAWAL_PARAMETERS = "withdrawalParameters";
  @SerializedName(SERIALIZED_NAME_WITHDRAWAL_PARAMETERS)
  private List<Object> withdrawalParameters;

  public CurrencyFiat() {
  }

  public CurrencyFiat code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public CurrencyFiat depositFee(BigDecimal depositFee) {
    
    this.depositFee = depositFee;
    return this;
  }

   /**
   * Get depositFee
   * @return depositFee
  **/
  @javax.annotation.Nullable
  public BigDecimal getDepositFee() {
    return depositFee;
  }


  public void setDepositFee(BigDecimal depositFee) {
    this.depositFee = depositFee;
  }


  public CurrencyFiat fiat(Boolean fiat) {
    
    this.fiat = fiat;
    return this;
  }

   /**
   * Get fiat
   * @return fiat
  **/
  @javax.annotation.Nullable
  public Boolean getFiat() {
    return fiat;
  }


  public void setFiat(Boolean fiat) {
    this.fiat = fiat;
  }


  public CurrencyFiat icon(String icon) {
    
    this.icon = icon;
    return this;
  }

   /**
   * Get icon
   * @return icon
  **/
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }


  public void setIcon(String icon) {
    this.icon = icon;
  }


  public CurrencyFiat id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public CurrencyFiat name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CurrencyFiat options(Object options) {
    
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @javax.annotation.Nullable
  public Object getOptions() {
    return options;
  }


  public void setOptions(Object options) {
    this.options = options;
  }


  public CurrencyFiat pricePrecision(Integer pricePrecision) {
    
    this.pricePrecision = pricePrecision;
    return this;
  }

   /**
   * Get pricePrecision
   * @return pricePrecision
  **/
  @javax.annotation.Nullable
  public Integer getPricePrecision() {
    return pricePrecision;
  }


  public void setPricePrecision(Integer pricePrecision) {
    this.pricePrecision = pricePrecision;
  }


  public CurrencyFiat protocols(List<Object> protocols) {
    
    this.protocols = protocols;
    return this;
  }

  public CurrencyFiat addProtocolsItem(Object protocolsItem) {
    if (this.protocols == null) {
      this.protocols = new ArrayList<>();
    }
    this.protocols.add(protocolsItem);
    return this;
  }

   /**
   * Get protocols
   * @return protocols
  **/
  @javax.annotation.Nullable
  public List<Object> getProtocols() {
    return protocols;
  }


  public void setProtocols(List<Object> protocols) {
    this.protocols = protocols;
  }


  public CurrencyFiat quantityPrecision(Integer quantityPrecision) {
    
    this.quantityPrecision = quantityPrecision;
    return this;
  }

   /**
   * Get quantityPrecision
   * @return quantityPrecision
  **/
  @javax.annotation.Nullable
  public Integer getQuantityPrecision() {
    return quantityPrecision;
  }


  public void setQuantityPrecision(Integer quantityPrecision) {
    this.quantityPrecision = quantityPrecision;
  }


  public CurrencyFiat supportsDeposits(Boolean supportsDeposits) {
    
    this.supportsDeposits = supportsDeposits;
    return this;
  }

   /**
   * Get supportsDeposits
   * @return supportsDeposits
  **/
  @javax.annotation.Nullable
  public Boolean getSupportsDeposits() {
    return supportsDeposits;
  }


  public void setSupportsDeposits(Boolean supportsDeposits) {
    this.supportsDeposits = supportsDeposits;
  }


  public CurrencyFiat supportsWithdrawals(Boolean supportsWithdrawals) {
    
    this.supportsWithdrawals = supportsWithdrawals;
    return this;
  }

   /**
   * Get supportsWithdrawals
   * @return supportsWithdrawals
  **/
  @javax.annotation.Nullable
  public Boolean getSupportsWithdrawals() {
    return supportsWithdrawals;
  }


  public void setSupportsWithdrawals(Boolean supportsWithdrawals) {
    this.supportsWithdrawals = supportsWithdrawals;
  }


  public CurrencyFiat withdrawalFee(BigDecimal withdrawalFee) {
    
    this.withdrawalFee = withdrawalFee;
    return this;
  }

   /**
   * Get withdrawalFee
   * @return withdrawalFee
  **/
  @javax.annotation.Nullable
  public BigDecimal getWithdrawalFee() {
    return withdrawalFee;
  }


  public void setWithdrawalFee(BigDecimal withdrawalFee) {
    this.withdrawalFee = withdrawalFee;
  }


  public CurrencyFiat withdrawalParameters(List<Object> withdrawalParameters) {
    
    this.withdrawalParameters = withdrawalParameters;
    return this;
  }

  public CurrencyFiat addWithdrawalParametersItem(Object withdrawalParametersItem) {
    if (this.withdrawalParameters == null) {
      this.withdrawalParameters = new ArrayList<>();
    }
    this.withdrawalParameters.add(withdrawalParametersItem);
    return this;
  }

   /**
   * Get withdrawalParameters
   * @return withdrawalParameters
  **/
  @javax.annotation.Nullable
  public List<Object> getWithdrawalParameters() {
    return withdrawalParameters;
  }


  public void setWithdrawalParameters(List<Object> withdrawalParameters) {
    this.withdrawalParameters = withdrawalParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrencyFiat currencyFiat = (CurrencyFiat) o;
    return Objects.equals(this.code, currencyFiat.code) &&
        Objects.equals(this.depositFee, currencyFiat.depositFee) &&
        Objects.equals(this.fiat, currencyFiat.fiat) &&
        Objects.equals(this.icon, currencyFiat.icon) &&
        Objects.equals(this.id, currencyFiat.id) &&
        Objects.equals(this.name, currencyFiat.name) &&
        Objects.equals(this.options, currencyFiat.options) &&
        Objects.equals(this.pricePrecision, currencyFiat.pricePrecision) &&
        Objects.equals(this.protocols, currencyFiat.protocols) &&
        Objects.equals(this.quantityPrecision, currencyFiat.quantityPrecision) &&
        Objects.equals(this.supportsDeposits, currencyFiat.supportsDeposits) &&
        Objects.equals(this.supportsWithdrawals, currencyFiat.supportsWithdrawals) &&
        Objects.equals(this.withdrawalFee, currencyFiat.withdrawalFee) &&
        Objects.equals(this.withdrawalParameters, currencyFiat.withdrawalParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, depositFee, fiat, icon, id, name, options, pricePrecision, protocols, quantityPrecision, supportsDeposits, supportsWithdrawals, withdrawalFee, withdrawalParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrencyFiat {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    depositFee: ").append(toIndentedString(depositFee)).append("\n");
    sb.append("    fiat: ").append(toIndentedString(fiat)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    pricePrecision: ").append(toIndentedString(pricePrecision)).append("\n");
    sb.append("    protocols: ").append(toIndentedString(protocols)).append("\n");
    sb.append("    quantityPrecision: ").append(toIndentedString(quantityPrecision)).append("\n");
    sb.append("    supportsDeposits: ").append(toIndentedString(supportsDeposits)).append("\n");
    sb.append("    supportsWithdrawals: ").append(toIndentedString(supportsWithdrawals)).append("\n");
    sb.append("    withdrawalFee: ").append(toIndentedString(withdrawalFee)).append("\n");
    sb.append("    withdrawalParameters: ").append(toIndentedString(withdrawalParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("depositFee");
    openapiFields.add("fiat");
    openapiFields.add("icon");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("options");
    openapiFields.add("pricePrecision");
    openapiFields.add("protocols");
    openapiFields.add("quantityPrecision");
    openapiFields.add("supportsDeposits");
    openapiFields.add("supportsWithdrawals");
    openapiFields.add("withdrawalFee");
    openapiFields.add("withdrawalParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CurrencyFiat
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CurrencyFiat.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CurrencyFiat is not found in the empty JSON string", CurrencyFiat.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CurrencyFiat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CurrencyFiat` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("protocols") != null && !jsonObj.get("protocols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocols` to be an array in the JSON string but got `%s`", jsonObj.get("protocols").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("withdrawalParameters") != null && !jsonObj.get("withdrawalParameters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `withdrawalParameters` to be an array in the JSON string but got `%s`", jsonObj.get("withdrawalParameters").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CurrencyFiat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CurrencyFiat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CurrencyFiat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CurrencyFiat.class));

       return (TypeAdapter<T>) new TypeAdapter<CurrencyFiat>() {
           @Override
           public void write(JsonWriter out, CurrencyFiat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CurrencyFiat read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CurrencyFiat given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CurrencyFiat
  * @throws IOException if the JSON string is invalid with respect to CurrencyFiat
  */
  public static CurrencyFiat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CurrencyFiat.class);
  }

 /**
  * Convert an instance of CurrencyFiat to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

