/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactionReportRequestData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-05T21:04:47.186508+02:00[Africa/Johannesburg]")
public class TransactionReportRequestData {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_EXTERNAL_PROCESSING = "externalProcessing";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PROCESSING)
  private String externalProcessing;

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  private Long walletId;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private String transactionType;

  public static final String SERIALIZED_NAME_FROM_DATE = "fromDate";
  @SerializedName(SERIALIZED_NAME_FROM_DATE)
  private String fromDate;

  public static final String SERIALIZED_NAME_TO_DATE = "toDate";
  @SerializedName(SERIALIZED_NAME_TO_DATE)
  private String toDate;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_LANGUAGE_TAG = "languageTag";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_TAG)
  private String languageTag;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Integer category;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_INCLUDE = "include";
  @SerializedName(SERIALIZED_NAME_INCLUDE)
  private String include;

  public static final String SERIALIZED_NAME_EXCLUDE = "exclude";
  @SerializedName(SERIALIZED_NAME_EXCLUDE)
  private String exclude;

  public TransactionReportRequestData() {
  }

  public TransactionReportRequestData type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public TransactionReportRequestData externalProcessing(String externalProcessing) {
    
    this.externalProcessing = externalProcessing;
    return this;
  }

   /**
   * Get externalProcessing
   * @return externalProcessing
  **/
  @javax.annotation.Nullable
  public String getExternalProcessing() {
    return externalProcessing;
  }


  public void setExternalProcessing(String externalProcessing) {
    this.externalProcessing = externalProcessing;
  }


  public TransactionReportRequestData walletId(Long walletId) {
    
    this.walletId = walletId;
    return this;
  }

   /**
   * Get walletId
   * @return walletId
  **/
  @javax.annotation.Nullable
  public Long getWalletId() {
    return walletId;
  }


  public void setWalletId(Long walletId) {
    this.walletId = walletId;
  }


  public TransactionReportRequestData transactionType(String transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  @javax.annotation.Nullable
  public String getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }


  public TransactionReportRequestData fromDate(String fromDate) {
    
    this.fromDate = fromDate;
    return this;
  }

   /**
   * Get fromDate
   * @return fromDate
  **/
  @javax.annotation.Nullable
  public String getFromDate() {
    return fromDate;
  }


  public void setFromDate(String fromDate) {
    this.fromDate = fromDate;
  }


  public TransactionReportRequestData toDate(String toDate) {
    
    this.toDate = toDate;
    return this;
  }

   /**
   * Get toDate
   * @return toDate
  **/
  @javax.annotation.Nullable
  public String getToDate() {
    return toDate;
  }


  public void setToDate(String toDate) {
    this.toDate = toDate;
  }


  public TransactionReportRequestData format(String format) {
    
    this.format = format;
    return this;
  }

   /**
   * Get format
   * @return format
  **/
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }


  public void setFormat(String format) {
    this.format = format;
  }


  public TransactionReportRequestData languageTag(String languageTag) {
    
    this.languageTag = languageTag;
    return this;
  }

   /**
   * Get languageTag
   * @return languageTag
  **/
  @javax.annotation.Nullable
  public String getLanguageTag() {
    return languageTag;
  }


  public void setLanguageTag(String languageTag) {
    this.languageTag = languageTag;
  }


  public TransactionReportRequestData category(Integer category) {
    
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  public Integer getCategory() {
    return category;
  }


  public void setCategory(Integer category) {
    this.category = category;
  }


  public TransactionReportRequestData accountName(String accountName) {
    
    this.accountName = accountName;
    return this;
  }

   /**
   * Get accountName
   * @return accountName
  **/
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }


  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public TransactionReportRequestData include(String include) {
    
    this.include = include;
    return this;
  }

   /**
   * Get include
   * @return include
  **/
  @javax.annotation.Nullable
  public String getInclude() {
    return include;
  }


  public void setInclude(String include) {
    this.include = include;
  }


  public TransactionReportRequestData exclude(String exclude) {
    
    this.exclude = exclude;
    return this;
  }

   /**
   * Get exclude
   * @return exclude
  **/
  @javax.annotation.Nullable
  public String getExclude() {
    return exclude;
  }


  public void setExclude(String exclude) {
    this.exclude = exclude;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionReportRequestData transactionReportRequestData = (TransactionReportRequestData) o;
    return Objects.equals(this.type, transactionReportRequestData.type) &&
        Objects.equals(this.externalProcessing, transactionReportRequestData.externalProcessing) &&
        Objects.equals(this.walletId, transactionReportRequestData.walletId) &&
        Objects.equals(this.transactionType, transactionReportRequestData.transactionType) &&
        Objects.equals(this.fromDate, transactionReportRequestData.fromDate) &&
        Objects.equals(this.toDate, transactionReportRequestData.toDate) &&
        Objects.equals(this.format, transactionReportRequestData.format) &&
        Objects.equals(this.languageTag, transactionReportRequestData.languageTag) &&
        Objects.equals(this.category, transactionReportRequestData.category) &&
        Objects.equals(this.accountName, transactionReportRequestData.accountName) &&
        Objects.equals(this.include, transactionReportRequestData.include) &&
        Objects.equals(this.exclude, transactionReportRequestData.exclude);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, externalProcessing, walletId, transactionType, fromDate, toDate, format, languageTag, category, accountName, include, exclude);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionReportRequestData {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    externalProcessing: ").append(toIndentedString(externalProcessing)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    languageTag: ").append(toIndentedString(languageTag)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    include: ").append(toIndentedString(include)).append("\n");
    sb.append("    exclude: ").append(toIndentedString(exclude)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("externalProcessing");
    openapiFields.add("walletId");
    openapiFields.add("transactionType");
    openapiFields.add("fromDate");
    openapiFields.add("toDate");
    openapiFields.add("format");
    openapiFields.add("languageTag");
    openapiFields.add("category");
    openapiFields.add("accountName");
    openapiFields.add("include");
    openapiFields.add("exclude");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransactionReportRequestData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TransactionReportRequestData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionReportRequestData is not found in the empty JSON string", TransactionReportRequestData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TransactionReportRequestData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionReportRequestData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("externalProcessing") != null && !jsonObj.get("externalProcessing").isJsonNull()) && !jsonObj.get("externalProcessing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalProcessing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalProcessing").toString()));
      }
      if ((jsonObj.get("transactionType") != null && !jsonObj.get("transactionType").isJsonNull()) && !jsonObj.get("transactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionType").toString()));
      }
      if ((jsonObj.get("fromDate") != null && !jsonObj.get("fromDate").isJsonNull()) && !jsonObj.get("fromDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromDate").toString()));
      }
      if ((jsonObj.get("toDate") != null && !jsonObj.get("toDate").isJsonNull()) && !jsonObj.get("toDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toDate").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("languageTag") != null && !jsonObj.get("languageTag").isJsonNull()) && !jsonObj.get("languageTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageTag").toString()));
      }
      if ((jsonObj.get("accountName") != null && !jsonObj.get("accountName").isJsonNull()) && !jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if ((jsonObj.get("include") != null && !jsonObj.get("include").isJsonNull()) && !jsonObj.get("include").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `include` to be a primitive type in the JSON string but got `%s`", jsonObj.get("include").toString()));
      }
      if ((jsonObj.get("exclude") != null && !jsonObj.get("exclude").isJsonNull()) && !jsonObj.get("exclude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exclude").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionReportRequestData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionReportRequestData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionReportRequestData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionReportRequestData.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionReportRequestData>() {
           @Override
           public void write(JsonWriter out, TransactionReportRequestData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionReportRequestData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionReportRequestData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionReportRequestData
  * @throws IOException if the JSON string is invalid with respect to TransactionReportRequestData
  */
  public static TransactionReportRequestData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionReportRequestData.class);
  }

 /**
  * Convert an instance of TransactionReportRequestData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

