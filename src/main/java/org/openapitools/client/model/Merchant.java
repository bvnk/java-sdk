/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.Wallet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Merchant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-05T21:04:47.186508+02:00[Africa/Johannesburg]")
public class Merchant {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_WEBHOOK_URL = "webhookUrl";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_URL)
  private String webhookUrl;

  public static final String SERIALIZED_NAME_AUTO_CONVERT_INVALID_PAYMENTS = "autoConvertInvalidPayments";
  @SerializedName(SERIALIZED_NAME_AUTO_CONVERT_INVALID_PAYMENTS)
  private Boolean autoConvertInvalidPayments = true;

  public static final String SERIALIZED_NAME_DEFAULT_EXPIRY_MINUTES = "defaultExpiryMinutes";
  @SerializedName(SERIALIZED_NAME_DEFAULT_EXPIRY_MINUTES)
  private Integer defaultExpiryMinutes;

  public static final String SERIALIZED_NAME_WEBHOOK_VERSION = "webhookVersion";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_VERSION)
  private Integer webhookVersion;

  public static final String SERIALIZED_NAME_WALLET = "wallet";
  @SerializedName(SERIALIZED_NAME_WALLET)
  private Wallet wallet;

  public static final String SERIALIZED_NAME_EMAIL_RECIPIENTS = "emailRecipients";
  @SerializedName(SERIALIZED_NAME_EMAIL_RECIPIENTS)
  private String emailRecipients;

  public Merchant() {
  }

  public Merchant id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public Merchant merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Get merchantId
   * @return merchantId
  **/
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public Merchant displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Merchant secret(String secret) {
    
    this.secret = secret;
    return this;
  }

   /**
   * Get secret
   * @return secret
  **/
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }


  public void setSecret(String secret) {
    this.secret = secret;
  }


  public Merchant webhookUrl(String webhookUrl) {
    
    this.webhookUrl = webhookUrl;
    return this;
  }

   /**
   * Get webhookUrl
   * @return webhookUrl
  **/
  @javax.annotation.Nullable
  public String getWebhookUrl() {
    return webhookUrl;
  }


  public void setWebhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
  }


  public Merchant autoConvertInvalidPayments(Boolean autoConvertInvalidPayments) {
    
    this.autoConvertInvalidPayments = autoConvertInvalidPayments;
    return this;
  }

   /**
   * Get autoConvertInvalidPayments
   * @return autoConvertInvalidPayments
  **/
  @javax.annotation.Nullable
  public Boolean getAutoConvertInvalidPayments() {
    return autoConvertInvalidPayments;
  }


  public void setAutoConvertInvalidPayments(Boolean autoConvertInvalidPayments) {
    this.autoConvertInvalidPayments = autoConvertInvalidPayments;
  }


  public Merchant defaultExpiryMinutes(Integer defaultExpiryMinutes) {
    
    this.defaultExpiryMinutes = defaultExpiryMinutes;
    return this;
  }

   /**
   * Get defaultExpiryMinutes
   * @return defaultExpiryMinutes
  **/
  @javax.annotation.Nullable
  public Integer getDefaultExpiryMinutes() {
    return defaultExpiryMinutes;
  }


  public void setDefaultExpiryMinutes(Integer defaultExpiryMinutes) {
    this.defaultExpiryMinutes = defaultExpiryMinutes;
  }


  public Merchant webhookVersion(Integer webhookVersion) {
    
    this.webhookVersion = webhookVersion;
    return this;
  }

   /**
   * Get webhookVersion
   * @return webhookVersion
  **/
  @javax.annotation.Nullable
  public Integer getWebhookVersion() {
    return webhookVersion;
  }


  public void setWebhookVersion(Integer webhookVersion) {
    this.webhookVersion = webhookVersion;
  }


  public Merchant wallet(Wallet wallet) {
    
    this.wallet = wallet;
    return this;
  }

   /**
   * Get wallet
   * @return wallet
  **/
  @javax.annotation.Nullable
  public Wallet getWallet() {
    return wallet;
  }


  public void setWallet(Wallet wallet) {
    this.wallet = wallet;
  }


  public Merchant emailRecipients(String emailRecipients) {
    
    this.emailRecipients = emailRecipients;
    return this;
  }

   /**
   * Get emailRecipients
   * @return emailRecipients
  **/
  @javax.annotation.Nullable
  public String getEmailRecipients() {
    return emailRecipients;
  }


  public void setEmailRecipients(String emailRecipients) {
    this.emailRecipients = emailRecipients;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Merchant merchant = (Merchant) o;
    return Objects.equals(this.id, merchant.id) &&
        Objects.equals(this.merchantId, merchant.merchantId) &&
        Objects.equals(this.displayName, merchant.displayName) &&
        Objects.equals(this.secret, merchant.secret) &&
        Objects.equals(this.webhookUrl, merchant.webhookUrl) &&
        Objects.equals(this.autoConvertInvalidPayments, merchant.autoConvertInvalidPayments) &&
        Objects.equals(this.defaultExpiryMinutes, merchant.defaultExpiryMinutes) &&
        Objects.equals(this.webhookVersion, merchant.webhookVersion) &&
        Objects.equals(this.wallet, merchant.wallet) &&
        Objects.equals(this.emailRecipients, merchant.emailRecipients);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, merchantId, displayName, secret, webhookUrl, autoConvertInvalidPayments, defaultExpiryMinutes, webhookVersion, wallet, emailRecipients);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Merchant {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("    autoConvertInvalidPayments: ").append(toIndentedString(autoConvertInvalidPayments)).append("\n");
    sb.append("    defaultExpiryMinutes: ").append(toIndentedString(defaultExpiryMinutes)).append("\n");
    sb.append("    webhookVersion: ").append(toIndentedString(webhookVersion)).append("\n");
    sb.append("    wallet: ").append(toIndentedString(wallet)).append("\n");
    sb.append("    emailRecipients: ").append(toIndentedString(emailRecipients)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("merchantId");
    openapiFields.add("displayName");
    openapiFields.add("secret");
    openapiFields.add("webhookUrl");
    openapiFields.add("autoConvertInvalidPayments");
    openapiFields.add("defaultExpiryMinutes");
    openapiFields.add("webhookVersion");
    openapiFields.add("wallet");
    openapiFields.add("emailRecipients");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Merchant
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Merchant.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Merchant is not found in the empty JSON string", Merchant.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Merchant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Merchant` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("merchantId") != null && !jsonObj.get("merchantId").isJsonNull()) && !jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
      if ((jsonObj.get("webhookUrl") != null && !jsonObj.get("webhookUrl").isJsonNull()) && !jsonObj.get("webhookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookUrl").toString()));
      }
      // validate the optional field `wallet`
      if (jsonObj.get("wallet") != null && !jsonObj.get("wallet").isJsonNull()) {
        Wallet.validateJsonObject(jsonObj.getAsJsonObject("wallet"));
      }
      if ((jsonObj.get("emailRecipients") != null && !jsonObj.get("emailRecipients").isJsonNull()) && !jsonObj.get("emailRecipients").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailRecipients` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailRecipients").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Merchant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Merchant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Merchant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Merchant.class));

       return (TypeAdapter<T>) new TypeAdapter<Merchant>() {
           @Override
           public void write(JsonWriter out, Merchant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Merchant read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Merchant given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Merchant
  * @throws IOException if the JSON string is invalid with respect to Merchant
  */
  public static Merchant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Merchant.class);
  }

 /**
  * Convert an instance of Merchant to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

