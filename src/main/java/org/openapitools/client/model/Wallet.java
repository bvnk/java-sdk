/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Currency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Wallet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-05T21:04:47.186508+02:00[Africa/Johannesburg]")
public class Wallet {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ALTERNATIVES = "alternatives";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVES)
  private List<Object> alternatives;

  public static final String SERIALIZED_NAME_APPROX_AVAILABLE = "approxAvailable";
  @SerializedName(SERIALIZED_NAME_APPROX_AVAILABLE)
  private String approxAvailable;

  public static final String SERIALIZED_NAME_APPROX_BALANCE = "approxBalance";
  @SerializedName(SERIALIZED_NAME_APPROX_BALANCE)
  private String approxBalance;

  public static final String SERIALIZED_NAME_AVAILABLE = "available";
  @SerializedName(SERIALIZED_NAME_AVAILABLE)
  private Float available;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Float balance;

  public static final String SERIALIZED_NAME_CONVERTED_AVAILABLE = "convertedAvailable";
  @SerializedName(SERIALIZED_NAME_CONVERTED_AVAILABLE)
  private Float convertedAvailable;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_CUSTODIAN_WALLET = "custodianWallet";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN_WALLET)
  private Boolean custodianWallet;

  public static final String SERIALIZED_NAME_DEPOSIT_FEE = "depositFee";
  @SerializedName(SERIALIZED_NAME_DEPOSIT_FEE)
  private Float depositFee;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IS_EMONEY = "isEmoney";
  @SerializedName(SERIALIZED_NAME_IS_EMONEY)
  private Boolean isEmoney = false;

  public static final String SERIALIZED_NAME_LOOKUP = "lookup";
  @SerializedName(SERIALIZED_NAME_LOOKUP)
  private String lookup;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_SUPPORTS_DEPOSITS = "supportsDeposits";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_DEPOSITS)
  private Boolean supportsDeposits = true;

  public static final String SERIALIZED_NAME_SUPPORTS_THIRD_PARTY = "supportsThirdParty";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_THIRD_PARTY)
  private Boolean supportsThirdParty = false;

  public static final String SERIALIZED_NAME_SUPPORTS_WITHDRAWALS = "supportsWithdrawals";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_WITHDRAWALS)
  private Boolean supportsWithdrawals = true;

  public static final String SERIALIZED_NAME_WITHDRAWAL_FEE = "withdrawalFee";
  @SerializedName(SERIALIZED_NAME_WITHDRAWAL_FEE)
  private Float withdrawalFee;

  public Wallet() {
  }

  public Wallet address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public Wallet alternatives(List<Object> alternatives) {
    
    this.alternatives = alternatives;
    return this;
  }

  public Wallet addAlternativesItem(Object alternativesItem) {
    if (this.alternatives == null) {
      this.alternatives = new ArrayList<>();
    }
    this.alternatives.add(alternativesItem);
    return this;
  }

   /**
   * Get alternatives
   * @return alternatives
  **/
  @javax.annotation.Nullable
  public List<Object> getAlternatives() {
    return alternatives;
  }


  public void setAlternatives(List<Object> alternatives) {
    this.alternatives = alternatives;
  }


  public Wallet approxAvailable(String approxAvailable) {
    
    this.approxAvailable = approxAvailable;
    return this;
  }

   /**
   * Get approxAvailable
   * @return approxAvailable
  **/
  @javax.annotation.Nullable
  public String getApproxAvailable() {
    return approxAvailable;
  }


  public void setApproxAvailable(String approxAvailable) {
    this.approxAvailable = approxAvailable;
  }


  public Wallet approxBalance(String approxBalance) {
    
    this.approxBalance = approxBalance;
    return this;
  }

   /**
   * Get approxBalance
   * @return approxBalance
  **/
  @javax.annotation.Nullable
  public String getApproxBalance() {
    return approxBalance;
  }


  public void setApproxBalance(String approxBalance) {
    this.approxBalance = approxBalance;
  }


  public Wallet available(Float available) {
    
    this.available = available;
    return this;
  }

   /**
   * Get available
   * @return available
  **/
  @javax.annotation.Nullable
  public Float getAvailable() {
    return available;
  }


  public void setAvailable(Float available) {
    this.available = available;
  }


  public Wallet balance(Float balance) {
    
    this.balance = balance;
    return this;
  }

   /**
   * Get balance
   * @return balance
  **/
  @javax.annotation.Nullable
  public Float getBalance() {
    return balance;
  }


  public void setBalance(Float balance) {
    this.balance = balance;
  }


  public Wallet convertedAvailable(Float convertedAvailable) {
    
    this.convertedAvailable = convertedAvailable;
    return this;
  }

   /**
   * Get convertedAvailable
   * @return convertedAvailable
  **/
  @javax.annotation.Nullable
  public Float getConvertedAvailable() {
    return convertedAvailable;
  }


  public void setConvertedAvailable(Float convertedAvailable) {
    this.convertedAvailable = convertedAvailable;
  }


  public Wallet currency(Currency currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  public Currency getCurrency() {
    return currency;
  }


  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public Wallet custodianWallet(Boolean custodianWallet) {
    
    this.custodianWallet = custodianWallet;
    return this;
  }

   /**
   * Get custodianWallet
   * @return custodianWallet
  **/
  @javax.annotation.Nullable
  public Boolean getCustodianWallet() {
    return custodianWallet;
  }


  public void setCustodianWallet(Boolean custodianWallet) {
    this.custodianWallet = custodianWallet;
  }


  public Wallet depositFee(Float depositFee) {
    
    this.depositFee = depositFee;
    return this;
  }

   /**
   * Get depositFee
   * @return depositFee
  **/
  @javax.annotation.Nullable
  public Float getDepositFee() {
    return depositFee;
  }


  public void setDepositFee(Float depositFee) {
    this.depositFee = depositFee;
  }


  public Wallet description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Wallet id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public Wallet isEmoney(Boolean isEmoney) {
    
    this.isEmoney = isEmoney;
    return this;
  }

   /**
   * Get isEmoney
   * @return isEmoney
  **/
  @javax.annotation.Nullable
  public Boolean getIsEmoney() {
    return isEmoney;
  }


  public void setIsEmoney(Boolean isEmoney) {
    this.isEmoney = isEmoney;
  }


  public Wallet lookup(String lookup) {
    
    this.lookup = lookup;
    return this;
  }

   /**
   * Get lookup
   * @return lookup
  **/
  @javax.annotation.Nullable
  public String getLookup() {
    return lookup;
  }


  public void setLookup(String lookup) {
    this.lookup = lookup;
  }


  public Wallet protocol(String protocol) {
    
    this.protocol = protocol;
    return this;
  }

   /**
   * Get protocol
   * @return protocol
  **/
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }


  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public Wallet supportsDeposits(Boolean supportsDeposits) {
    
    this.supportsDeposits = supportsDeposits;
    return this;
  }

   /**
   * Get supportsDeposits
   * @return supportsDeposits
  **/
  @javax.annotation.Nullable
  public Boolean getSupportsDeposits() {
    return supportsDeposits;
  }


  public void setSupportsDeposits(Boolean supportsDeposits) {
    this.supportsDeposits = supportsDeposits;
  }


  public Wallet supportsThirdParty(Boolean supportsThirdParty) {
    
    this.supportsThirdParty = supportsThirdParty;
    return this;
  }

   /**
   * Get supportsThirdParty
   * @return supportsThirdParty
  **/
  @javax.annotation.Nullable
  public Boolean getSupportsThirdParty() {
    return supportsThirdParty;
  }


  public void setSupportsThirdParty(Boolean supportsThirdParty) {
    this.supportsThirdParty = supportsThirdParty;
  }


  public Wallet supportsWithdrawals(Boolean supportsWithdrawals) {
    
    this.supportsWithdrawals = supportsWithdrawals;
    return this;
  }

   /**
   * Get supportsWithdrawals
   * @return supportsWithdrawals
  **/
  @javax.annotation.Nullable
  public Boolean getSupportsWithdrawals() {
    return supportsWithdrawals;
  }


  public void setSupportsWithdrawals(Boolean supportsWithdrawals) {
    this.supportsWithdrawals = supportsWithdrawals;
  }


  public Wallet withdrawalFee(Float withdrawalFee) {
    
    this.withdrawalFee = withdrawalFee;
    return this;
  }

   /**
   * Get withdrawalFee
   * @return withdrawalFee
  **/
  @javax.annotation.Nullable
  public Float getWithdrawalFee() {
    return withdrawalFee;
  }


  public void setWithdrawalFee(Float withdrawalFee) {
    this.withdrawalFee = withdrawalFee;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Wallet wallet = (Wallet) o;
    return Objects.equals(this.address, wallet.address) &&
        Objects.equals(this.alternatives, wallet.alternatives) &&
        Objects.equals(this.approxAvailable, wallet.approxAvailable) &&
        Objects.equals(this.approxBalance, wallet.approxBalance) &&
        Objects.equals(this.available, wallet.available) &&
        Objects.equals(this.balance, wallet.balance) &&
        Objects.equals(this.convertedAvailable, wallet.convertedAvailable) &&
        Objects.equals(this.currency, wallet.currency) &&
        Objects.equals(this.custodianWallet, wallet.custodianWallet) &&
        Objects.equals(this.depositFee, wallet.depositFee) &&
        Objects.equals(this.description, wallet.description) &&
        Objects.equals(this.id, wallet.id) &&
        Objects.equals(this.isEmoney, wallet.isEmoney) &&
        Objects.equals(this.lookup, wallet.lookup) &&
        Objects.equals(this.protocol, wallet.protocol) &&
        Objects.equals(this.supportsDeposits, wallet.supportsDeposits) &&
        Objects.equals(this.supportsThirdParty, wallet.supportsThirdParty) &&
        Objects.equals(this.supportsWithdrawals, wallet.supportsWithdrawals) &&
        Objects.equals(this.withdrawalFee, wallet.withdrawalFee);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, alternatives, approxAvailable, approxBalance, available, balance, convertedAvailable, currency, custodianWallet, depositFee, description, id, isEmoney, lookup, protocol, supportsDeposits, supportsThirdParty, supportsWithdrawals, withdrawalFee);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Wallet {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    alternatives: ").append(toIndentedString(alternatives)).append("\n");
    sb.append("    approxAvailable: ").append(toIndentedString(approxAvailable)).append("\n");
    sb.append("    approxBalance: ").append(toIndentedString(approxBalance)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    convertedAvailable: ").append(toIndentedString(convertedAvailable)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    custodianWallet: ").append(toIndentedString(custodianWallet)).append("\n");
    sb.append("    depositFee: ").append(toIndentedString(depositFee)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isEmoney: ").append(toIndentedString(isEmoney)).append("\n");
    sb.append("    lookup: ").append(toIndentedString(lookup)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    supportsDeposits: ").append(toIndentedString(supportsDeposits)).append("\n");
    sb.append("    supportsThirdParty: ").append(toIndentedString(supportsThirdParty)).append("\n");
    sb.append("    supportsWithdrawals: ").append(toIndentedString(supportsWithdrawals)).append("\n");
    sb.append("    withdrawalFee: ").append(toIndentedString(withdrawalFee)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("alternatives");
    openapiFields.add("approxAvailable");
    openapiFields.add("approxBalance");
    openapiFields.add("available");
    openapiFields.add("balance");
    openapiFields.add("convertedAvailable");
    openapiFields.add("currency");
    openapiFields.add("custodianWallet");
    openapiFields.add("depositFee");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("isEmoney");
    openapiFields.add("lookup");
    openapiFields.add("protocol");
    openapiFields.add("supportsDeposits");
    openapiFields.add("supportsThirdParty");
    openapiFields.add("supportsWithdrawals");
    openapiFields.add("withdrawalFee");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Wallet
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Wallet.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Wallet is not found in the empty JSON string", Wallet.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Wallet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Wallet` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alternatives") != null && !jsonObj.get("alternatives").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternatives` to be an array in the JSON string but got `%s`", jsonObj.get("alternatives").toString()));
      }
      if ((jsonObj.get("approxAvailable") != null && !jsonObj.get("approxAvailable").isJsonNull()) && !jsonObj.get("approxAvailable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approxAvailable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approxAvailable").toString()));
      }
      if ((jsonObj.get("approxBalance") != null && !jsonObj.get("approxBalance").isJsonNull()) && !jsonObj.get("approxBalance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approxBalance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approxBalance").toString()));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("currency"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("lookup") != null && !jsonObj.get("lookup").isJsonNull()) && !jsonObj.get("lookup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lookup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lookup").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Wallet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Wallet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Wallet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Wallet.class));

       return (TypeAdapter<T>) new TypeAdapter<Wallet>() {
           @Override
           public void write(JsonWriter out, Wallet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Wallet read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Wallet given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Wallet
  * @throws IOException if the JSON string is invalid with respect to Wallet
  */
  public static Wallet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Wallet.class);
  }

 /**
  * Convert an instance of Wallet to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

