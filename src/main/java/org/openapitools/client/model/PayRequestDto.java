/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import org.openapitools.client.model.DirectionDto;
import org.openapitools.client.model.PayInDetailDto;
import org.openapitools.client.model.PayOutDetailDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DTO required to create a payment in or a payment out
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-05T21:04:47.186508+02:00[Africa/Johannesburg]")
public class PayRequestDto {
  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId = "5C8D8D78-366A-4AFB-B658-A64CE543C5DB";

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount = new BigDecimal("223.05");

  public static final String SERIALIZED_NAME_EXPIRY_MINUTES = "expiryMinutes";
  @SerializedName(SERIALIZED_NAME_EXPIRY_MINUTES)
  private Integer expiryMinutes = 20;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency = "EUR";

  public static final String SERIALIZED_NAME_RETURN_URL = "returnUrl";
  @SerializedName(SERIALIZED_NAME_RETURN_URL)
  private String returnUrl = "https://my-shop.com/payment-complete?ref=xyz";

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference = "myUniqueRef333";

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private DirectionDto type;

  public static final String SERIALIZED_NAME_PAY_IN_DETAILS = "payInDetails";
  @SerializedName(SERIALIZED_NAME_PAY_IN_DETAILS)
  private PayInDetailDto payInDetails;

  public static final String SERIALIZED_NAME_PAY_OUT_DETAILS = "payOutDetails";
  @SerializedName(SERIALIZED_NAME_PAY_OUT_DETAILS)
  private PayOutDetailDto payOutDetails;

  public PayRequestDto() {
  }

  public PayRequestDto merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Your Merchant ID. You can find it on the Merchant Details page in your account
   * @return merchantId
  **/
  @javax.annotation.Nonnull
  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public PayRequestDto amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * payment amount
   * minimum: 0
   * @return amount
  **/
  @javax.annotation.Nonnull
  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public PayRequestDto expiryMinutes(Integer expiryMinutes) {
    
    this.expiryMinutes = expiryMinutes;
    return this;
  }

   /**
   * time period after which payment expires
   * @return expiryMinutes
  **/
  @javax.annotation.Nullable
  public Integer getExpiryMinutes() {
    return expiryMinutes;
  }


  public void setExpiryMinutes(Integer expiryMinutes) {
    this.expiryMinutes = expiryMinutes;
  }


  public PayRequestDto currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * currency acronym
   * @return currency
  **/
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }


  @ToUpperCase
  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public PayRequestDto returnUrl(String returnUrl) {
    
    this.returnUrl = returnUrl;
    return this;
  }

   /**
   * URL that the customer will be redirected to if they click a &#39;Back to Merchant&#39; button on the payment web page
   * @return returnUrl
  **/
  @javax.annotation.Nullable
  public String getReturnUrl() {
    return returnUrl;
  }


  public void setReturnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
  }


  public PayRequestDto reference(String reference) {
    
    this.reference = reference;
    return this;
  }

   /**
   * Your payment reference ID. Feel free to submit any ID to tie the payment to your customer
   * @return reference
  **/
  @javax.annotation.Nonnull
  public String getReference() {
    return reference;
  }


  public void setReference(String reference) {
    this.reference = reference;
  }


  public PayRequestDto type(DirectionDto type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public DirectionDto getType() {
    return type;
  }


  public void setType(DirectionDto type) {
    this.type = type;
  }


  public PayRequestDto payInDetails(PayInDetailDto payInDetails) {
    
    this.payInDetails = payInDetails;
    return this;
  }

   /**
   * Get payInDetails
   * @return payInDetails
  **/
  @javax.annotation.Nullable
  public PayInDetailDto getPayInDetails() {
    return payInDetails;
  }


  public void setPayInDetails(PayInDetailDto payInDetails) {
    this.payInDetails = payInDetails;
  }


  public PayRequestDto payOutDetails(PayOutDetailDto payOutDetails) {
    
    this.payOutDetails = payOutDetails;
    return this;
  }

   /**
   * Get payOutDetails
   * @return payOutDetails
  **/
  @javax.annotation.Nullable
  public PayOutDetailDto getPayOutDetails() {
    return payOutDetails;
  }


  public void setPayOutDetails(PayOutDetailDto payOutDetails) {
    this.payOutDetails = payOutDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayRequestDto payRequestDto = (PayRequestDto) o;
    return Objects.equals(this.merchantId, payRequestDto.merchantId) &&
        Objects.equals(this.amount, payRequestDto.amount) &&
        Objects.equals(this.expiryMinutes, payRequestDto.expiryMinutes) &&
        Objects.equals(this.currency, payRequestDto.currency) &&
        Objects.equals(this.returnUrl, payRequestDto.returnUrl) &&
        Objects.equals(this.reference, payRequestDto.reference) &&
        Objects.equals(this.type, payRequestDto.type) &&
        Objects.equals(this.payInDetails, payRequestDto.payInDetails) &&
        Objects.equals(this.payOutDetails, payRequestDto.payOutDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantId, amount, expiryMinutes, currency, returnUrl, reference, type, payInDetails, payOutDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayRequestDto {\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    expiryMinutes: ").append(toIndentedString(expiryMinutes)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    returnUrl: ").append(toIndentedString(returnUrl)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    payInDetails: ").append(toIndentedString(payInDetails)).append("\n");
    sb.append("    payOutDetails: ").append(toIndentedString(payOutDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("merchantId");
    openapiFields.add("amount");
    openapiFields.add("expiryMinutes");
    openapiFields.add("currency");
    openapiFields.add("returnUrl");
    openapiFields.add("reference");
    openapiFields.add("type");
    openapiFields.add("payInDetails");
    openapiFields.add("payOutDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("merchantId");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("reference");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayRequestDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayRequestDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayRequestDto is not found in the empty JSON string", PayRequestDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PayRequestDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PayRequestDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PayRequestDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("returnUrl") != null && !jsonObj.get("returnUrl").isJsonNull()) && !jsonObj.get("returnUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnUrl").toString()));
      }
      if (!jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      // validate the optional field `payInDetails`
      if (jsonObj.get("payInDetails") != null && !jsonObj.get("payInDetails").isJsonNull()) {
        PayInDetailDto.validateJsonObject(jsonObj.getAsJsonObject("payInDetails"));
      }
      // validate the optional field `payOutDetails`
      if (jsonObj.get("payOutDetails") != null && !jsonObj.get("payOutDetails").isJsonNull()) {
        PayOutDetailDto.validateJsonObject(jsonObj.getAsJsonObject("payOutDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayRequestDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayRequestDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayRequestDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayRequestDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PayRequestDto>() {
           @Override
           public void write(JsonWriter out, PayRequestDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PayRequestDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayRequestDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayRequestDto
  * @throws IOException if the JSON string is invalid with respect to PayRequestDto
  */
  public static PayRequestDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayRequestDto.class);
  }

 /**
  * Convert an instance of PayRequestDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

