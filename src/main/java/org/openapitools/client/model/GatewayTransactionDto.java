/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ExchangeRateDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specify details about transaction (onchain or offchain) linked to the payment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-05T21:04:47.186508+02:00[Africa/Johannesburg]")
public class GatewayTransactionDto {
  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private Long dateCreated;

  public static final String SERIALIZED_NAME_DATE_CONFIRMED = "dateConfirmed";
  @SerializedName(SERIALIZED_NAME_DATE_CONFIRMED)
  private Long dateConfirmed;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_RISK = "risk";
  @SerializedName(SERIALIZED_NAME_RISK)
  private Object risk;

  public static final String SERIALIZED_NAME_NETWORK_FEE_CURRENCY = "networkFeeCurrency";
  @SerializedName(SERIALIZED_NAME_NETWORK_FEE_CURRENCY)
  private String networkFeeCurrency;

  public static final String SERIALIZED_NAME_NETWORK_FEE_AMOUNT = "networkFeeAmount";
  @SerializedName(SERIALIZED_NAME_NETWORK_FEE_AMOUNT)
  private BigDecimal networkFeeAmount;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<String> sources;

  public static final String SERIALIZED_NAME_DISPLAY_RATE = "displayRate";
  @SerializedName(SERIALIZED_NAME_DISPLAY_RATE)
  private ExchangeRateDto displayRate;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchangeRate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private ExchangeRateDto exchangeRate;

  public GatewayTransactionDto() {
  }

  public GatewayTransactionDto dateCreated(Long dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  public Long getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(Long dateCreated) {
    this.dateCreated = dateCreated;
  }


  public GatewayTransactionDto dateConfirmed(Long dateConfirmed) {
    
    this.dateConfirmed = dateConfirmed;
    return this;
  }

   /**
   * Get dateConfirmed
   * @return dateConfirmed
  **/
  @javax.annotation.Nullable
  public Long getDateConfirmed() {
    return dateConfirmed;
  }


  public void setDateConfirmed(Long dateConfirmed) {
    this.dateConfirmed = dateConfirmed;
  }


  public GatewayTransactionDto hash(String hash) {
    
    this.hash = hash;
    return this;
  }

   /**
   * Transaction hash
   * @return hash
  **/
  @javax.annotation.Nullable
  public String getHash() {
    return hash;
  }


  public void setHash(String hash) {
    this.hash = hash;
  }


  public GatewayTransactionDto amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * payment amount
   * @return amount
  **/
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public GatewayTransactionDto risk(Object risk) {
    
    this.risk = risk;
    return this;
  }

   /**
   * Get risk
   * @return risk
  **/
  @javax.annotation.Nullable
  public Object getRisk() {
    return risk;
  }


  public void setRisk(Object risk) {
    this.risk = risk;
  }


  public GatewayTransactionDto networkFeeCurrency(String networkFeeCurrency) {
    
    this.networkFeeCurrency = networkFeeCurrency;
    return this;
  }

   /**
   * currency acronym
   * @return networkFeeCurrency
  **/
  @javax.annotation.Nullable
  public String getNetworkFeeCurrency() {
    return networkFeeCurrency;
  }


  public void setNetworkFeeCurrency(String networkFeeCurrency) {
    this.networkFeeCurrency = networkFeeCurrency;
  }


  public GatewayTransactionDto networkFeeAmount(BigDecimal networkFeeAmount) {
    
    this.networkFeeAmount = networkFeeAmount;
    return this;
  }

   /**
   * payment amount
   * @return networkFeeAmount
  **/
  @javax.annotation.Nullable
  public BigDecimal getNetworkFeeAmount() {
    return networkFeeAmount;
  }


  public void setNetworkFeeAmount(BigDecimal networkFeeAmount) {
    this.networkFeeAmount = networkFeeAmount;
  }


  public GatewayTransactionDto sources(List<String> sources) {
    
    this.sources = sources;
    return this;
  }

  public GatewayTransactionDto addSourcesItem(String sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

   /**
   * list of source addresses (only applicable if payment in)
   * @return sources
  **/
  @javax.annotation.Nullable
  public List<String> getSources() {
    return sources;
  }


  public void setSources(List<String> sources) {
    this.sources = sources;
  }


  public GatewayTransactionDto displayRate(ExchangeRateDto displayRate) {
    
    this.displayRate = displayRate;
    return this;
  }

   /**
   * Get displayRate
   * @return displayRate
  **/
  @javax.annotation.Nullable
  public ExchangeRateDto getDisplayRate() {
    return displayRate;
  }


  public void setDisplayRate(ExchangeRateDto displayRate) {
    this.displayRate = displayRate;
  }


  public GatewayTransactionDto exchangeRate(ExchangeRateDto exchangeRate) {
    
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * Get exchangeRate
   * @return exchangeRate
  **/
  @javax.annotation.Nullable
  public ExchangeRateDto getExchangeRate() {
    return exchangeRate;
  }


  public void setExchangeRate(ExchangeRateDto exchangeRate) {
    this.exchangeRate = exchangeRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayTransactionDto gatewayTransactionDto = (GatewayTransactionDto) o;
    return Objects.equals(this.dateCreated, gatewayTransactionDto.dateCreated) &&
        Objects.equals(this.dateConfirmed, gatewayTransactionDto.dateConfirmed) &&
        Objects.equals(this.hash, gatewayTransactionDto.hash) &&
        Objects.equals(this.amount, gatewayTransactionDto.amount) &&
        Objects.equals(this.risk, gatewayTransactionDto.risk) &&
        Objects.equals(this.networkFeeCurrency, gatewayTransactionDto.networkFeeCurrency) &&
        Objects.equals(this.networkFeeAmount, gatewayTransactionDto.networkFeeAmount) &&
        Objects.equals(this.sources, gatewayTransactionDto.sources) &&
        Objects.equals(this.displayRate, gatewayTransactionDto.displayRate) &&
        Objects.equals(this.exchangeRate, gatewayTransactionDto.exchangeRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateCreated, dateConfirmed, hash, amount, risk, networkFeeCurrency, networkFeeAmount, sources, displayRate, exchangeRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayTransactionDto {\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateConfirmed: ").append(toIndentedString(dateConfirmed)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    risk: ").append(toIndentedString(risk)).append("\n");
    sb.append("    networkFeeCurrency: ").append(toIndentedString(networkFeeCurrency)).append("\n");
    sb.append("    networkFeeAmount: ").append(toIndentedString(networkFeeAmount)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    displayRate: ").append(toIndentedString(displayRate)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateCreated");
    openapiFields.add("dateConfirmed");
    openapiFields.add("hash");
    openapiFields.add("amount");
    openapiFields.add("risk");
    openapiFields.add("networkFeeCurrency");
    openapiFields.add("networkFeeAmount");
    openapiFields.add("sources");
    openapiFields.add("displayRate");
    openapiFields.add("exchangeRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GatewayTransactionDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GatewayTransactionDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayTransactionDto is not found in the empty JSON string", GatewayTransactionDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GatewayTransactionDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayTransactionDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("hash") != null && !jsonObj.get("hash").isJsonNull()) && !jsonObj.get("hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash").toString()));
      }
      if ((jsonObj.get("networkFeeCurrency") != null && !jsonObj.get("networkFeeCurrency").isJsonNull()) && !jsonObj.get("networkFeeCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkFeeCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkFeeCurrency").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
      }
      // validate the optional field `displayRate`
      if (jsonObj.get("displayRate") != null && !jsonObj.get("displayRate").isJsonNull()) {
        ExchangeRateDto.validateJsonObject(jsonObj.getAsJsonObject("displayRate"));
      }
      // validate the optional field `exchangeRate`
      if (jsonObj.get("exchangeRate") != null && !jsonObj.get("exchangeRate").isJsonNull()) {
        ExchangeRateDto.validateJsonObject(jsonObj.getAsJsonObject("exchangeRate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayTransactionDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayTransactionDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayTransactionDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayTransactionDto.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayTransactionDto>() {
           @Override
           public void write(JsonWriter out, GatewayTransactionDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayTransactionDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GatewayTransactionDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GatewayTransactionDto
  * @throws IOException if the JSON string is invalid with respect to GatewayTransactionDto
  */
  public static GatewayTransactionDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayTransactionDto.class);
  }

 /**
  * Convert an instance of GatewayTransactionDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

