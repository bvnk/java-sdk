/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MerchantChannelRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-05T21:04:47.186508+02:00[Africa/Johannesburg]")
public class MerchantChannelRequest {
  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId = "0a12a214-1619-43fa-9be1-0029f6a440a0";

  public static final String SERIALIZED_NAME_PAY_CURRENCY = "payCurrency";
  @SerializedName(SERIALIZED_NAME_PAY_CURRENCY)
  private String payCurrency = "ETH";

  public static final String SERIALIZED_NAME_DISPLAY_CURRENCY = "displayCurrency";
  @SerializedName(SERIALIZED_NAME_DISPLAY_CURRENCY)
  private String displayCurrency = "EUR";

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference = "c1b933d5-3354-4f83-a05f-0b53f1be85f2";

  public MerchantChannelRequest() {
  }

  public MerchantChannelRequest merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * The merchant ID that you are creating the channel on.
   * @return merchantId
  **/
  @javax.annotation.Nonnull
  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public MerchantChannelRequest payCurrency(String payCurrency) {
    
    this.payCurrency = payCurrency;
    return this;
  }

   /**
   * Cryptocurrency code that the channel will operate on.
   * @return payCurrency
  **/
  @javax.annotation.Nonnull
  public String getPayCurrency() {
    return payCurrency;
  }


  public void setPayCurrency(String payCurrency) {
    this.payCurrency = payCurrency;
  }


  public MerchantChannelRequest displayCurrency(String displayCurrency) {
    
    this.displayCurrency = displayCurrency;
    return this;
  }

   /**
   * The currency which pricing will be displayed to the end user in (can be the same as payCurrency, or can be different).
   * @return displayCurrency
  **/
  @javax.annotation.Nonnull
  public String getDisplayCurrency() {
    return displayCurrency;
  }


  public void setDisplayCurrency(String displayCurrency) {
    this.displayCurrency = displayCurrency;
  }


  public MerchantChannelRequest reference(String reference) {
    
    this.reference = reference;
    return this;
  }

   /**
   * An external reference for the channel that your customer will see.
   * @return reference
  **/
  @javax.annotation.Nonnull
  public String getReference() {
    return reference;
  }


  public void setReference(String reference) {
    this.reference = reference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantChannelRequest merchantChannelRequest = (MerchantChannelRequest) o;
    return Objects.equals(this.merchantId, merchantChannelRequest.merchantId) &&
        Objects.equals(this.payCurrency, merchantChannelRequest.payCurrency) &&
        Objects.equals(this.displayCurrency, merchantChannelRequest.displayCurrency) &&
        Objects.equals(this.reference, merchantChannelRequest.reference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantId, payCurrency, displayCurrency, reference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantChannelRequest {\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    payCurrency: ").append(toIndentedString(payCurrency)).append("\n");
    sb.append("    displayCurrency: ").append(toIndentedString(displayCurrency)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("merchantId");
    openapiFields.add("payCurrency");
    openapiFields.add("displayCurrency");
    openapiFields.add("reference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("merchantId");
    openapiRequiredFields.add("payCurrency");
    openapiRequiredFields.add("displayCurrency");
    openapiRequiredFields.add("reference");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MerchantChannelRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MerchantChannelRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantChannelRequest is not found in the empty JSON string", MerchantChannelRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MerchantChannelRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MerchantChannelRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MerchantChannelRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if (!jsonObj.get("payCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payCurrency").toString()));
      }
      if (!jsonObj.get("displayCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayCurrency").toString()));
      }
      if (!jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantChannelRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantChannelRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantChannelRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantChannelRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantChannelRequest>() {
           @Override
           public void write(JsonWriter out, MerchantChannelRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantChannelRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MerchantChannelRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MerchantChannelRequest
  * @throws IOException if the JSON string is invalid with respect to MerchantChannelRequest
  */
  public static MerchantChannelRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantChannelRequest.class);
  }

 /**
  * Convert an instance of MerchantChannelRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

