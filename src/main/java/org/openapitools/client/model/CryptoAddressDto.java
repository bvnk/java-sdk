/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AlternativeAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payment address details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-05T21:04:47.186508+02:00[Africa/Johannesburg]")
public class CryptoAddressDto {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_ALTERNATIVES = "alternatives";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVES)
  private List<AlternativeAddress> alternatives;

  public CryptoAddressDto() {
  }

  public CryptoAddressDto address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * Address to withdrawal funds to
   * @return address
  **/
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public CryptoAddressDto tag(String tag) {
    
    this.tag = tag;
    return this;
  }

   /**
   * This is a payment destination tag. This fields isn&#39;t null when the paidCurrency.currency value is XRP
   * @return tag
  **/
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }


  public void setTag(String tag) {
    this.tag = tag;
  }


  public CryptoAddressDto protocol(String protocol) {
    
    this.protocol = protocol;
    return this;
  }

   /**
   * protocol behind a currency (ERC20 or TRC20)
   * @return protocol
  **/
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }


  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public CryptoAddressDto uri(String uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * The destination address URI for QR code
   * @return uri
  **/
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    this.uri = uri;
  }


  public CryptoAddressDto alternatives(List<AlternativeAddress> alternatives) {
    
    this.alternatives = alternatives;
    return this;
  }

  public CryptoAddressDto addAlternativesItem(AlternativeAddress alternativesItem) {
    if (this.alternatives == null) {
      this.alternatives = new ArrayList<>();
    }
    this.alternatives.add(alternativesItem);
    return this;
  }

   /**
   * List of non-default addresses for other tokens
   * @return alternatives
  **/
  @javax.annotation.Nullable
  public List<AlternativeAddress> getAlternatives() {
    return alternatives;
  }


  public void setAlternatives(List<AlternativeAddress> alternatives) {
    this.alternatives = alternatives;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CryptoAddressDto cryptoAddressDto = (CryptoAddressDto) o;
    return Objects.equals(this.address, cryptoAddressDto.address) &&
        Objects.equals(this.tag, cryptoAddressDto.tag) &&
        Objects.equals(this.protocol, cryptoAddressDto.protocol) &&
        Objects.equals(this.uri, cryptoAddressDto.uri) &&
        Objects.equals(this.alternatives, cryptoAddressDto.alternatives);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, tag, protocol, uri, alternatives);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CryptoAddressDto {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    alternatives: ").append(toIndentedString(alternatives)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("tag");
    openapiFields.add("protocol");
    openapiFields.add("uri");
    openapiFields.add("alternatives");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CryptoAddressDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CryptoAddressDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CryptoAddressDto is not found in the empty JSON string", CryptoAddressDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CryptoAddressDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CryptoAddressDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if (jsonObj.get("alternatives") != null && !jsonObj.get("alternatives").isJsonNull()) {
        JsonArray jsonArrayalternatives = jsonObj.getAsJsonArray("alternatives");
        if (jsonArrayalternatives != null) {
          // ensure the json data is an array
          if (!jsonObj.get("alternatives").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `alternatives` to be an array in the JSON string but got `%s`", jsonObj.get("alternatives").toString()));
          }

          // validate the optional field `alternatives` (array)
          for (int i = 0; i < jsonArrayalternatives.size(); i++) {
            AlternativeAddress.validateJsonObject(jsonArrayalternatives.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CryptoAddressDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CryptoAddressDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CryptoAddressDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CryptoAddressDto.class));

       return (TypeAdapter<T>) new TypeAdapter<CryptoAddressDto>() {
           @Override
           public void write(JsonWriter out, CryptoAddressDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CryptoAddressDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CryptoAddressDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CryptoAddressDto
  * @throws IOException if the JSON string is invalid with respect to CryptoAddressDto
  */
  public static CryptoAddressDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CryptoAddressDto.class);
  }

 /**
  * Convert an instance of CryptoAddressDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

