/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.CryptoAddressDto;
import org.openapitools.client.model.DirectionDto;
import org.openapitools.client.model.ExchangeRateDto;
import org.openapitools.client.model.GatewayTransactionDto;
import org.openapitools.client.model.PayAmountsDto;
import org.openapitools.client.model.PaymentStatusDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains all the information about a summary payment object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-05T21:04:47.186508+02:00[Africa/Johannesburg]")
public class SummaryPaymentDto {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_MERCHANT_DISPLAY_NAME = "merchantDisplayName";
  @SerializedName(SERIALIZED_NAME_MERCHANT_DISPLAY_NAME)
  private String merchantDisplayName;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private Long dateCreated;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private Long expiryDate;

  public static final String SERIALIZED_NAME_QUOTE_EXPIRY_DATE = "quoteExpiryDate";
  @SerializedName(SERIALIZED_NAME_QUOTE_EXPIRY_DATE)
  private Long quoteExpiryDate;

  public static final String SERIALIZED_NAME_ACCEPTANCE_EXPIRY_DATE = "acceptanceExpiryDate";
  @SerializedName(SERIALIZED_NAME_ACCEPTANCE_EXPIRY_DATE)
  private Long acceptanceExpiryDate;

  public static final String SERIALIZED_NAME_QUOTE_STATUS = "quoteStatus";
  @SerializedName(SERIALIZED_NAME_QUOTE_STATUS)
  private String quoteStatus;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private DirectionDto type;

  /**
   * Payment sub type
   */
  @JsonAdapter(SubTypeEnum.Adapter.class)
  public enum SubTypeEnum {
    MERCHANTPAYIN("merchantPayIn"),
    
    MERCHANTPAYOUT("merchantPayOut"),
    
    MERCHANTREFUND("merchantRefund");

    private String value;

    SubTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubTypeEnum fromValue(String value) {
      for (SubTypeEnum b : SubTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SUB_TYPE = "subType";
  @SerializedName(SERIALIZED_NAME_SUB_TYPE)
  private SubTypeEnum subType = SubTypeEnum.MERCHANTPAYIN;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private PaymentStatusDto status;

  public static final String SERIALIZED_NAME_DISPLAY_CURRENCY = "displayCurrency";
  @SerializedName(SERIALIZED_NAME_DISPLAY_CURRENCY)
  private PayAmountsDto displayCurrency;

  public static final String SERIALIZED_NAME_WALLET_CURRENCY = "walletCurrency";
  @SerializedName(SERIALIZED_NAME_WALLET_CURRENCY)
  private PayAmountsDto walletCurrency;

  public static final String SERIALIZED_NAME_PAID_CURRENCY = "paidCurrency";
  @SerializedName(SERIALIZED_NAME_PAID_CURRENCY)
  private PayAmountsDto paidCurrency;

  public static final String SERIALIZED_NAME_FEE_CURRENCY = "feeCurrency";
  @SerializedName(SERIALIZED_NAME_FEE_CURRENCY)
  private PayAmountsDto feeCurrency;

  public static final String SERIALIZED_NAME_DISPLAY_RATE = "displayRate";
  @SerializedName(SERIALIZED_NAME_DISPLAY_RATE)
  private ExchangeRateDto displayRate;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchangeRate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private ExchangeRateDto exchangeRate;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private CryptoAddressDto address;

  public static final String SERIALIZED_NAME_RETURN_URL = "returnUrl";
  @SerializedName(SERIALIZED_NAME_RETURN_URL)
  private String returnUrl;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private List<GatewayTransactionDto> transactions;

  public static final String SERIALIZED_NAME_REFUND = "refund";
  @SerializedName(SERIALIZED_NAME_REFUND)
  private Object refund;

  public static final String SERIALIZED_NAME_REFUNDS = "refunds";
  @SerializedName(SERIALIZED_NAME_REFUNDS)
  private List<Object> refunds;

  public SummaryPaymentDto() {
  }

  public SummaryPaymentDto uuid(String uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * unique identifier for the merchant payment
   * @return uuid
  **/
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  public SummaryPaymentDto merchantDisplayName(String merchantDisplayName) {
    
    this.merchantDisplayName = merchantDisplayName;
    return this;
  }

   /**
   * display name for the merchant payment
   * @return merchantDisplayName
  **/
  @javax.annotation.Nullable
  public String getMerchantDisplayName() {
    return merchantDisplayName;
  }


  public void setMerchantDisplayName(String merchantDisplayName) {
    this.merchantDisplayName = merchantDisplayName;
  }


  public SummaryPaymentDto merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Your Merchant ID. You can find it on the Merchant Details page in your account
   * @return merchantId
  **/
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public SummaryPaymentDto dateCreated(Long dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Currently this is a long - can it be changed? Date and times are encoded into UNIX epoch timestamps
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  public Long getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(Long dateCreated) {
    this.dateCreated = dateCreated;
  }


  public SummaryPaymentDto expiryDate(Long expiryDate) {
    
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Date and times are encoded into UNIX epoch timestamps
   * @return expiryDate
  **/
  @javax.annotation.Nullable
  public Long getExpiryDate() {
    return expiryDate;
  }


  public void setExpiryDate(Long expiryDate) {
    this.expiryDate = expiryDate;
  }


  public SummaryPaymentDto quoteExpiryDate(Long quoteExpiryDate) {
    
    this.quoteExpiryDate = quoteExpiryDate;
    return this;
  }

   /**
   * Date and times are encoded into UNIX epoch timestamps
   * @return quoteExpiryDate
  **/
  @javax.annotation.Nullable
  public Long getQuoteExpiryDate() {
    return quoteExpiryDate;
  }


  public void setQuoteExpiryDate(Long quoteExpiryDate) {
    this.quoteExpiryDate = quoteExpiryDate;
  }


  public SummaryPaymentDto acceptanceExpiryDate(Long acceptanceExpiryDate) {
    
    this.acceptanceExpiryDate = acceptanceExpiryDate;
    return this;
  }

   /**
   * Date and times are encoded into UNIX epoch timestamps
   * @return acceptanceExpiryDate
  **/
  @javax.annotation.Nullable
  public Long getAcceptanceExpiryDate() {
    return acceptanceExpiryDate;
  }


  public void setAcceptanceExpiryDate(Long acceptanceExpiryDate) {
    this.acceptanceExpiryDate = acceptanceExpiryDate;
  }


  public SummaryPaymentDto quoteStatus(String quoteStatus) {
    
    this.quoteStatus = quoteStatus;
    return this;
  }

   /**
   * Get quoteStatus
   * @return quoteStatus
  **/
  @javax.annotation.Nullable
  public String getQuoteStatus() {
    return quoteStatus;
  }


  public void setQuoteStatus(String quoteStatus) {
    this.quoteStatus = quoteStatus;
  }


  public SummaryPaymentDto reference(String reference) {
    
    this.reference = reference;
    return this;
  }

   /**
   * Your payment reference ID. Feel free to submit any ID to tie the payment to your customer
   * @return reference
  **/
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }


  public void setReference(String reference) {
    this.reference = reference;
  }


  public SummaryPaymentDto type(DirectionDto type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public DirectionDto getType() {
    return type;
  }


  public void setType(DirectionDto type) {
    this.type = type;
  }


  public SummaryPaymentDto subType(SubTypeEnum subType) {
    
    this.subType = subType;
    return this;
  }

   /**
   * Payment sub type
   * @return subType
  **/
  @javax.annotation.Nullable
  public SubTypeEnum getSubType() {
    return subType;
  }


  public void setSubType(SubTypeEnum subType) {
    this.subType = subType;
  }


  public SummaryPaymentDto status(PaymentStatusDto status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public PaymentStatusDto getStatus() {
    return status;
  }


  public void setStatus(PaymentStatusDto status) {
    this.status = status;
  }


  public SummaryPaymentDto displayCurrency(PayAmountsDto displayCurrency) {
    
    this.displayCurrency = displayCurrency;
    return this;
  }

   /**
   * Get displayCurrency
   * @return displayCurrency
  **/
  @javax.annotation.Nullable
  public PayAmountsDto getDisplayCurrency() {
    return displayCurrency;
  }


  public void setDisplayCurrency(PayAmountsDto displayCurrency) {
    this.displayCurrency = displayCurrency;
  }


  public SummaryPaymentDto walletCurrency(PayAmountsDto walletCurrency) {
    
    this.walletCurrency = walletCurrency;
    return this;
  }

   /**
   * Get walletCurrency
   * @return walletCurrency
  **/
  @javax.annotation.Nullable
  public PayAmountsDto getWalletCurrency() {
    return walletCurrency;
  }


  public void setWalletCurrency(PayAmountsDto walletCurrency) {
    this.walletCurrency = walletCurrency;
  }


  public SummaryPaymentDto paidCurrency(PayAmountsDto paidCurrency) {
    
    this.paidCurrency = paidCurrency;
    return this;
  }

   /**
   * Get paidCurrency
   * @return paidCurrency
  **/
  @javax.annotation.Nullable
  public PayAmountsDto getPaidCurrency() {
    return paidCurrency;
  }


  public void setPaidCurrency(PayAmountsDto paidCurrency) {
    this.paidCurrency = paidCurrency;
  }


  public SummaryPaymentDto feeCurrency(PayAmountsDto feeCurrency) {
    
    this.feeCurrency = feeCurrency;
    return this;
  }

   /**
   * Get feeCurrency
   * @return feeCurrency
  **/
  @javax.annotation.Nullable
  public PayAmountsDto getFeeCurrency() {
    return feeCurrency;
  }


  public void setFeeCurrency(PayAmountsDto feeCurrency) {
    this.feeCurrency = feeCurrency;
  }


  public SummaryPaymentDto displayRate(ExchangeRateDto displayRate) {
    
    this.displayRate = displayRate;
    return this;
  }

   /**
   * Get displayRate
   * @return displayRate
  **/
  @javax.annotation.Nullable
  public ExchangeRateDto getDisplayRate() {
    return displayRate;
  }


  public void setDisplayRate(ExchangeRateDto displayRate) {
    this.displayRate = displayRate;
  }


  public SummaryPaymentDto exchangeRate(ExchangeRateDto exchangeRate) {
    
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * Get exchangeRate
   * @return exchangeRate
  **/
  @javax.annotation.Nullable
  public ExchangeRateDto getExchangeRate() {
    return exchangeRate;
  }


  public void setExchangeRate(ExchangeRateDto exchangeRate) {
    this.exchangeRate = exchangeRate;
  }


  public SummaryPaymentDto address(CryptoAddressDto address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  public CryptoAddressDto getAddress() {
    return address;
  }


  public void setAddress(CryptoAddressDto address) {
    this.address = address;
  }


  public SummaryPaymentDto returnUrl(String returnUrl) {
    
    this.returnUrl = returnUrl;
    return this;
  }

   /**
   * URL that the customer will be redirected to if they click a \&quot;Back to Merchant\&quot; button on the payment web page
   * @return returnUrl
  **/
  @javax.annotation.Nullable
  public String getReturnUrl() {
    return returnUrl;
  }


  public void setReturnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
  }


  public SummaryPaymentDto redirectUrl(String redirectUrl) {
    
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * URL to the payment page that you can redirect your customers to
   * @return redirectUrl
  **/
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }


  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public SummaryPaymentDto transactions(List<GatewayTransactionDto> transactions) {
    
    this.transactions = transactions;
    return this;
  }

  public SummaryPaymentDto addTransactionsItem(GatewayTransactionDto transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Get transactions
   * @return transactions
  **/
  @javax.annotation.Nullable
  public List<GatewayTransactionDto> getTransactions() {
    return transactions;
  }


  public void setTransactions(List<GatewayTransactionDto> transactions) {
    this.transactions = transactions;
  }


  public SummaryPaymentDto refund(Object refund) {
    
    this.refund = refund;
    return this;
  }

   /**
   * The payment this object is a refund of. This should reference the pay in that this refund was created for
   * @return refund
  **/
  @javax.annotation.Nullable
  public Object getRefund() {
    return refund;
  }


  public void setRefund(Object refund) {
    this.refund = refund;
  }


  public SummaryPaymentDto refunds(List<Object> refunds) {
    
    this.refunds = refunds;
    return this;
  }

  public SummaryPaymentDto addRefundsItem(Object refundsItem) {
    if (this.refunds == null) {
      this.refunds = new ArrayList<>();
    }
    this.refunds.add(refundsItem);
    return this;
  }

   /**
   * Refunds that have been requested for this payment. This should reference the refund payout for this pay in
   * @return refunds
  **/
  @javax.annotation.Nullable
  public List<Object> getRefunds() {
    return refunds;
  }


  public void setRefunds(List<Object> refunds) {
    this.refunds = refunds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SummaryPaymentDto summaryPaymentDto = (SummaryPaymentDto) o;
    return Objects.equals(this.uuid, summaryPaymentDto.uuid) &&
        Objects.equals(this.merchantDisplayName, summaryPaymentDto.merchantDisplayName) &&
        Objects.equals(this.merchantId, summaryPaymentDto.merchantId) &&
        Objects.equals(this.dateCreated, summaryPaymentDto.dateCreated) &&
        Objects.equals(this.expiryDate, summaryPaymentDto.expiryDate) &&
        Objects.equals(this.quoteExpiryDate, summaryPaymentDto.quoteExpiryDate) &&
        Objects.equals(this.acceptanceExpiryDate, summaryPaymentDto.acceptanceExpiryDate) &&
        Objects.equals(this.quoteStatus, summaryPaymentDto.quoteStatus) &&
        Objects.equals(this.reference, summaryPaymentDto.reference) &&
        Objects.equals(this.type, summaryPaymentDto.type) &&
        Objects.equals(this.subType, summaryPaymentDto.subType) &&
        Objects.equals(this.status, summaryPaymentDto.status) &&
        Objects.equals(this.displayCurrency, summaryPaymentDto.displayCurrency) &&
        Objects.equals(this.walletCurrency, summaryPaymentDto.walletCurrency) &&
        Objects.equals(this.paidCurrency, summaryPaymentDto.paidCurrency) &&
        Objects.equals(this.feeCurrency, summaryPaymentDto.feeCurrency) &&
        Objects.equals(this.displayRate, summaryPaymentDto.displayRate) &&
        Objects.equals(this.exchangeRate, summaryPaymentDto.exchangeRate) &&
        Objects.equals(this.address, summaryPaymentDto.address) &&
        Objects.equals(this.returnUrl, summaryPaymentDto.returnUrl) &&
        Objects.equals(this.redirectUrl, summaryPaymentDto.redirectUrl) &&
        Objects.equals(this.transactions, summaryPaymentDto.transactions) &&
        Objects.equals(this.refund, summaryPaymentDto.refund) &&
        Objects.equals(this.refunds, summaryPaymentDto.refunds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, merchantDisplayName, merchantId, dateCreated, expiryDate, quoteExpiryDate, acceptanceExpiryDate, quoteStatus, reference, type, subType, status, displayCurrency, walletCurrency, paidCurrency, feeCurrency, displayRate, exchangeRate, address, returnUrl, redirectUrl, transactions, refund, refunds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SummaryPaymentDto {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    merchantDisplayName: ").append(toIndentedString(merchantDisplayName)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    quoteExpiryDate: ").append(toIndentedString(quoteExpiryDate)).append("\n");
    sb.append("    acceptanceExpiryDate: ").append(toIndentedString(acceptanceExpiryDate)).append("\n");
    sb.append("    quoteStatus: ").append(toIndentedString(quoteStatus)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    displayCurrency: ").append(toIndentedString(displayCurrency)).append("\n");
    sb.append("    walletCurrency: ").append(toIndentedString(walletCurrency)).append("\n");
    sb.append("    paidCurrency: ").append(toIndentedString(paidCurrency)).append("\n");
    sb.append("    feeCurrency: ").append(toIndentedString(feeCurrency)).append("\n");
    sb.append("    displayRate: ").append(toIndentedString(displayRate)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    returnUrl: ").append(toIndentedString(returnUrl)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    refund: ").append(toIndentedString(refund)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uuid");
    openapiFields.add("merchantDisplayName");
    openapiFields.add("merchantId");
    openapiFields.add("dateCreated");
    openapiFields.add("expiryDate");
    openapiFields.add("quoteExpiryDate");
    openapiFields.add("acceptanceExpiryDate");
    openapiFields.add("quoteStatus");
    openapiFields.add("reference");
    openapiFields.add("type");
    openapiFields.add("subType");
    openapiFields.add("status");
    openapiFields.add("displayCurrency");
    openapiFields.add("walletCurrency");
    openapiFields.add("paidCurrency");
    openapiFields.add("feeCurrency");
    openapiFields.add("displayRate");
    openapiFields.add("exchangeRate");
    openapiFields.add("address");
    openapiFields.add("returnUrl");
    openapiFields.add("redirectUrl");
    openapiFields.add("transactions");
    openapiFields.add("refund");
    openapiFields.add("refunds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SummaryPaymentDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SummaryPaymentDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SummaryPaymentDto is not found in the empty JSON string", SummaryPaymentDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SummaryPaymentDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SummaryPaymentDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("merchantDisplayName") != null && !jsonObj.get("merchantDisplayName").isJsonNull()) && !jsonObj.get("merchantDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantDisplayName").toString()));
      }
      if ((jsonObj.get("merchantId") != null && !jsonObj.get("merchantId").isJsonNull()) && !jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if ((jsonObj.get("quoteStatus") != null && !jsonObj.get("quoteStatus").isJsonNull()) && !jsonObj.get("quoteStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quoteStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quoteStatus").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if ((jsonObj.get("subType") != null && !jsonObj.get("subType").isJsonNull()) && !jsonObj.get("subType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subType").toString()));
      }
      // validate the optional field `displayCurrency`
      if (jsonObj.get("displayCurrency") != null && !jsonObj.get("displayCurrency").isJsonNull()) {
        PayAmountsDto.validateJsonObject(jsonObj.getAsJsonObject("displayCurrency"));
      }
      // validate the optional field `walletCurrency`
      if (jsonObj.get("walletCurrency") != null && !jsonObj.get("walletCurrency").isJsonNull()) {
        PayAmountsDto.validateJsonObject(jsonObj.getAsJsonObject("walletCurrency"));
      }
      // validate the optional field `paidCurrency`
      if (jsonObj.get("paidCurrency") != null && !jsonObj.get("paidCurrency").isJsonNull()) {
        PayAmountsDto.validateJsonObject(jsonObj.getAsJsonObject("paidCurrency"));
      }
      // validate the optional field `feeCurrency`
      if (jsonObj.get("feeCurrency") != null && !jsonObj.get("feeCurrency").isJsonNull()) {
        PayAmountsDto.validateJsonObject(jsonObj.getAsJsonObject("feeCurrency"));
      }
      // validate the optional field `displayRate`
      if (jsonObj.get("displayRate") != null && !jsonObj.get("displayRate").isJsonNull()) {
        ExchangeRateDto.validateJsonObject(jsonObj.getAsJsonObject("displayRate"));
      }
      // validate the optional field `exchangeRate`
      if (jsonObj.get("exchangeRate") != null && !jsonObj.get("exchangeRate").isJsonNull()) {
        ExchangeRateDto.validateJsonObject(jsonObj.getAsJsonObject("exchangeRate"));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        CryptoAddressDto.validateJsonObject(jsonObj.getAsJsonObject("address"));
      }
      if ((jsonObj.get("returnUrl") != null && !jsonObj.get("returnUrl").isJsonNull()) && !jsonObj.get("returnUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnUrl").toString()));
      }
      if ((jsonObj.get("redirectUrl") != null && !jsonObj.get("redirectUrl").isJsonNull()) && !jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        JsonArray jsonArraytransactions = jsonObj.getAsJsonArray("transactions");
        if (jsonArraytransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactions` to be an array in the JSON string but got `%s`", jsonObj.get("transactions").toString()));
          }

          // validate the optional field `transactions` (array)
          for (int i = 0; i < jsonArraytransactions.size(); i++) {
            GatewayTransactionDto.validateJsonObject(jsonArraytransactions.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("refunds") != null && !jsonObj.get("refunds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `refunds` to be an array in the JSON string but got `%s`", jsonObj.get("refunds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SummaryPaymentDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SummaryPaymentDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SummaryPaymentDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SummaryPaymentDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SummaryPaymentDto>() {
           @Override
           public void write(JsonWriter out, SummaryPaymentDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SummaryPaymentDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SummaryPaymentDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SummaryPaymentDto
  * @throws IOException if the JSON string is invalid with respect to SummaryPaymentDto
  */
  public static SummaryPaymentDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SummaryPaymentDto.class);
  }

 /**
  * Convert an instance of SummaryPaymentDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

