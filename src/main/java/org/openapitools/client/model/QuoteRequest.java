/*
 * BVNK API Endpoints
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QuoteRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-05T21:04:47.186508+02:00[Africa/Johannesburg]")
public class QuoteRequest {
  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from = "EUR";

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to = "USDC";

  public static final String SERIALIZED_NAME_FROM_WALLET = "fromWallet";
  @SerializedName(SERIALIZED_NAME_FROM_WALLET)
  private BigDecimal fromWallet = new BigDecimal("3598236");

  public static final String SERIALIZED_NAME_USE_MINIMUM = "useMinimum";
  @SerializedName(SERIALIZED_NAME_USE_MINIMUM)
  private Boolean useMinimum = false;

  public static final String SERIALIZED_NAME_USE_MAXIMUM = "useMaximum";
  @SerializedName(SERIALIZED_NAME_USE_MAXIMUM)
  private Boolean useMaximum = false;

  public static final String SERIALIZED_NAME_TO_WALLET = "toWallet";
  @SerializedName(SERIALIZED_NAME_TO_WALLET)
  private BigDecimal toWallet = new BigDecimal("3598514");

  public static final String SERIALIZED_NAME_AMOUNT_IN = "amountIn";
  @SerializedName(SERIALIZED_NAME_AMOUNT_IN)
  private BigDecimal amountIn = new BigDecimal("10");

  public static final String SERIALIZED_NAME_PAY_IN_METHOD = "payInMethod";
  @SerializedName(SERIALIZED_NAME_PAY_IN_METHOD)
  private String payInMethod = "wallet";

  public static final String SERIALIZED_NAME_PAY_OUT_METHOD = "payOutMethod";
  @SerializedName(SERIALIZED_NAME_PAY_OUT_METHOD)
  private String payOutMethod = "wallet";

  public QuoteRequest() {
  }

  public QuoteRequest from(String from) {
    
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @javax.annotation.Nonnull
  public String getFrom() {
    return from;
  }


  public void setFrom(String from) {
    this.from = from;
  }


  public QuoteRequest to(String to) {
    
    this.to = to;
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @javax.annotation.Nonnull
  public String getTo() {
    return to;
  }


  public void setTo(String to) {
    this.to = to;
  }


  public QuoteRequest fromWallet(BigDecimal fromWallet) {
    
    this.fromWallet = fromWallet;
    return this;
  }

   /**
   * Get fromWallet
   * @return fromWallet
  **/
  @javax.annotation.Nonnull
  public BigDecimal getFromWallet() {
    return fromWallet;
  }


  public void setFromWallet(BigDecimal fromWallet) {
    this.fromWallet = fromWallet;
  }


  public QuoteRequest useMinimum(Boolean useMinimum) {
    
    this.useMinimum = useMinimum;
    return this;
  }

   /**
   * Get useMinimum
   * @return useMinimum
  **/
  @javax.annotation.Nonnull
  public Boolean getUseMinimum() {
    return useMinimum;
  }


  public void setUseMinimum(Boolean useMinimum) {
    this.useMinimum = useMinimum;
  }


  public QuoteRequest useMaximum(Boolean useMaximum) {
    
    this.useMaximum = useMaximum;
    return this;
  }

   /**
   * Get useMaximum
   * @return useMaximum
  **/
  @javax.annotation.Nonnull
  public Boolean getUseMaximum() {
    return useMaximum;
  }


  public void setUseMaximum(Boolean useMaximum) {
    this.useMaximum = useMaximum;
  }


  public QuoteRequest toWallet(BigDecimal toWallet) {
    
    this.toWallet = toWallet;
    return this;
  }

   /**
   * Get toWallet
   * @return toWallet
  **/
  @javax.annotation.Nonnull
  public BigDecimal getToWallet() {
    return toWallet;
  }


  public void setToWallet(BigDecimal toWallet) {
    this.toWallet = toWallet;
  }


  public QuoteRequest amountIn(BigDecimal amountIn) {
    
    this.amountIn = amountIn;
    return this;
  }

   /**
   * Get amountIn
   * @return amountIn
  **/
  @javax.annotation.Nonnull
  public BigDecimal getAmountIn() {
    return amountIn;
  }


  public void setAmountIn(BigDecimal amountIn) {
    this.amountIn = amountIn;
  }


  public QuoteRequest payInMethod(String payInMethod) {
    
    this.payInMethod = payInMethod;
    return this;
  }

   /**
   * Get payInMethod
   * @return payInMethod
  **/
  @javax.annotation.Nonnull
  public String getPayInMethod() {
    return payInMethod;
  }


  public void setPayInMethod(String payInMethod) {
    this.payInMethod = payInMethod;
  }


  public QuoteRequest payOutMethod(String payOutMethod) {
    
    this.payOutMethod = payOutMethod;
    return this;
  }

   /**
   * Get payOutMethod
   * @return payOutMethod
  **/
  @javax.annotation.Nonnull
  public String getPayOutMethod() {
    return payOutMethod;
  }


  public void setPayOutMethod(String payOutMethod) {
    this.payOutMethod = payOutMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteRequest quoteRequest = (QuoteRequest) o;
    return Objects.equals(this.from, quoteRequest.from) &&
        Objects.equals(this.to, quoteRequest.to) &&
        Objects.equals(this.fromWallet, quoteRequest.fromWallet) &&
        Objects.equals(this.useMinimum, quoteRequest.useMinimum) &&
        Objects.equals(this.useMaximum, quoteRequest.useMaximum) &&
        Objects.equals(this.toWallet, quoteRequest.toWallet) &&
        Objects.equals(this.amountIn, quoteRequest.amountIn) &&
        Objects.equals(this.payInMethod, quoteRequest.payInMethod) &&
        Objects.equals(this.payOutMethod, quoteRequest.payOutMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, to, fromWallet, useMinimum, useMaximum, toWallet, amountIn, payInMethod, payOutMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteRequest {\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    fromWallet: ").append(toIndentedString(fromWallet)).append("\n");
    sb.append("    useMinimum: ").append(toIndentedString(useMinimum)).append("\n");
    sb.append("    useMaximum: ").append(toIndentedString(useMaximum)).append("\n");
    sb.append("    toWallet: ").append(toIndentedString(toWallet)).append("\n");
    sb.append("    amountIn: ").append(toIndentedString(amountIn)).append("\n");
    sb.append("    payInMethod: ").append(toIndentedString(payInMethod)).append("\n");
    sb.append("    payOutMethod: ").append(toIndentedString(payOutMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("from");
    openapiFields.add("to");
    openapiFields.add("fromWallet");
    openapiFields.add("useMinimum");
    openapiFields.add("useMaximum");
    openapiFields.add("toWallet");
    openapiFields.add("amountIn");
    openapiFields.add("payInMethod");
    openapiFields.add("payOutMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("to");
    openapiRequiredFields.add("fromWallet");
    openapiRequiredFields.add("useMinimum");
    openapiRequiredFields.add("useMaximum");
    openapiRequiredFields.add("toWallet");
    openapiRequiredFields.add("amountIn");
    openapiRequiredFields.add("payInMethod");
    openapiRequiredFields.add("payOutMethod");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to QuoteRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!QuoteRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuoteRequest is not found in the empty JSON string", QuoteRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!QuoteRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuoteRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QuoteRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if (!jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if (!jsonObj.get("payInMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payInMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payInMethod").toString()));
      }
      if (!jsonObj.get("payOutMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payOutMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payOutMethod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuoteRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuoteRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuoteRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuoteRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<QuoteRequest>() {
           @Override
           public void write(JsonWriter out, QuoteRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuoteRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QuoteRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QuoteRequest
  * @throws IOException if the JSON string is invalid with respect to QuoteRequest
  */
  public static QuoteRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuoteRequest.class);
  }

 /**
  * Convert an instance of QuoteRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

